/*
 * @(#)ParserTokenManager.java	4.12
 *
 * 
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS HEADER.
 * 
 * Copyright (c) 2007 Sun Microsystems, Inc. All Rights Reserved.
 * 
 * The contents of this file are subject to the terms of either the GNU General
 * Public License Version 2 only ("GPL") or the Common Development and
 * Distribution License("CDDL")(collectively, the "License"). You may not use
 * this file except in compliance with the License. You can obtain a copy of the
 * License at http://opendmk.dev.java.net/legal_notices/licenses.txt or in the 
 * LEGAL_NOTICES folder that accompanied this code. See the License for the 
 * specific language governing permissions and limitations under the License.
 * 
 * When distributing the software, include this License Header Notice in each
 * file and include the License file found at
 *     http://opendmk.dev.java.net/legal_notices/licenses.txt
 * or in the LEGAL_NOTICES folder that accompanied this code.
 * Sun designates this particular file as subject to the "Classpath" exception
 * as provided by Sun in the GPL Version 2 section of the License file that
 * accompanied this code.
 * 
 * If applicable, add the following below the License Header, with the fields
 * enclosed by brackets [] replaced by your own identifying information:
 * 
 *       "Portions Copyrighted [year] [name of copyright owner]"
 * 
 * Contributor(s):
 * 
 * If you wish your version of this file to be governed by only the CDDL or
 * only the GPL Version 2, indicate your decision by adding
 * 
 *       "[Contributor] elects to include this software in this distribution
 *        under the [CDDL or GPL Version 2] license."
 * 
 * If you don't indicate a single choice of license, a recipient has the option
 * to distribute your version of this file under either the CDDL or the GPL
 * Version 2, or to extend the choice of license to its licensees as provided
 * above. However, if you add GPL Version 2 code and therefore, elected the
 * GPL Version 2 license, then the option applies only if the new code is made
 * subject to such option by the copyright holder.
 * 
 *
 */
/* Generated By:JJTree&JavaCC: Do not edit this line. ParserTokenManager.java */
package com.sun.jdmk.tools.mibgen;
import java.io.*;
import java.math.*;

public class ParserTokenManager implements ParserConstants
{
  public  java.io.PrintStream debugStream = System.out;
  public  void setDebugStream(java.io.PrintStream ds) { debugStream = ds; }
private final int jjStopStringLiteralDfa_0(int pos, long active0, long active1)
{
   switch (pos)
   {
      case 0:
         if ((active0 & 0xb7df7dfeff6dfb40L) != 0L || (active1 & 0x5b7ee3L) != 0L)
         {
            jjmatchedKind = 88;
            return 9;
         }
         if ((active0 & 0x4820820100920080L) != 0L || (active1 & 0x24811cL) != 0L)
         {
            jjmatchedKind = 87;
            return 7;
         }
         return -1;
      case 1:
         if ((active0 & 0x97df7dfeff6dfb40L) != 0L || (active1 & 0x5b7ee3L) != 0L)
         {
            jjmatchedKind = 88;
            jjmatchedPos = 1;
            return 9;
         }
         if ((active0 & 0x4820820100920080L) != 0L || (active1 & 0x24811cL) != 0L)
         {
            jjmatchedKind = 87;
            jjmatchedPos = 1;
            return 7;
         }
         if ((active0 & 0x2000000000000000L) != 0L)
            return 9;
         return -1;
      case 2:
         if ((active0 & 0x97df7dfefe6d9b40L) != 0L || (active1 & 0x5b7ee3L) != 0L)
         {
            if (jjmatchedPos != 2)
            {
               jjmatchedKind = 88;
               jjmatchedPos = 2;
            }
            return 9;
         }
         if ((active0 & 0x4820820100920080L) != 0L || (active1 & 0x24811cL) != 0L)
         {
            if (jjmatchedPos != 2)
            {
               jjmatchedKind = 87;
               jjmatchedPos = 2;
            }
            return 7;
         }
         if ((active0 & 0x1006000L) != 0L)
            return 9;
         return -1;
      case 3:
         if ((active0 & 0x97cf7dfede6d9b40L) != 0L || (active1 & 0x5b1ea3L) != 0L)
         {
            jjmatchedKind = 88;
            jjmatchedPos = 3;
            return 9;
         }
         if ((active0 & 0x4820820100920080L) != 0L || (active1 & 0x24011cL) != 0L)
         {
            jjmatchedKind = 87;
            jjmatchedPos = 3;
            return 7;
         }
         if ((active1 & 0x8000L) != 0L)
            return 7;
         if ((active0 & 0x10000020004000L) != 0L || (active1 & 0x6040L) != 0L)
            return 9;
         return -1;
      case 4:
         if ((active0 & 0x87cf7d6e8e6d8b40L) != 0L || (active1 & 0x521ea3L) != 0L)
         {
            jjmatchedKind = 88;
            jjmatchedPos = 4;
            return 9;
         }
         if ((active0 & 0x4820820100120080L) != 0L || (active1 & 0x20011cL) != 0L)
         {
            jjmatchedKind = 87;
            jjmatchedPos = 4;
            return 7;
         }
         if ((active0 & 0x800000L) != 0L || (active1 & 0x40000L) != 0L)
            return 7;
         if ((active0 & 0x1000009050001000L) != 0L || (active1 & 0x90000L) != 0L)
            return 9;
         return -1;
      case 5:
         if ((active0 & 0x800f0d6e8e650b00L) != 0L || (active1 & 0x521823L) != 0L)
         {
            if (jjmatchedPos != 5)
            {
               jjmatchedKind = 88;
               jjmatchedPos = 5;
            }
            return 9;
         }
         if ((active0 & 0x20000000000000L) != 0L || (active1 & 0x100L) != 0L)
            return 7;
         if ((active0 & 0x4800820100120080L) != 0L || (active1 & 0x20001cL) != 0L)
         {
            if (jjmatchedPos != 5)
            {
               jjmatchedKind = 87;
               jjmatchedPos = 5;
            }
            return 7;
         }
         if ((active0 & 0x7c0700000088040L) != 0L || (active1 & 0x680L) != 0L)
            return 9;
         return -1;
      case 6:
         if ((active0 & 0x870f6d4286650b00L) != 0L || (active1 & 0x521823L) != 0L)
         {
            jjmatchedKind = 88;
            jjmatchedPos = 6;
            return 9;
         }
         if ((active0 & 0x20000L) != 0L)
            return 7;
         if ((active0 & 0x80002c08000000L) != 0L)
            return 9;
         if ((active0 & 0x4800820100100080L) != 0L || (active1 & 0x20001cL) != 0L)
         {
            jjmatchedKind = 87;
            jjmatchedPos = 6;
            return 7;
         }
         return -1;
      case 7:
         if ((active0 & 0x820100100080L) != 0L || (active1 & 0x20001cL) != 0L)
         {
            jjmatchedKind = 87;
            jjmatchedPos = 7;
            return 7;
         }
         if ((active0 & 0x870e6d4082650300L) != 0L || (active1 & 0x521801L) != 0L)
         {
            jjmatchedKind = 88;
            jjmatchedPos = 7;
            return 9;
         }
         if ((active0 & 0x4800000000000000L) != 0L)
            return 7;
         if ((active0 & 0x1000204000800L) != 0L || (active1 & 0x22L) != 0L)
            return 9;
         return -1;
      case 8:
         if ((active0 & 0x800100100080L) != 0L || (active1 & 0x200014L) != 0L)
         {
            jjmatchedKind = 87;
            jjmatchedPos = 8;
            return 7;
         }
         if ((active0 & 0x20000000000L) != 0L || (active1 & 0x8L) != 0L)
            return 7;
         if ((active0 & 0x870e6d4082650300L) != 0L || (active1 & 0x400800L) != 0L)
         {
            jjmatchedKind = 88;
            jjmatchedPos = 8;
            return 9;
         }
         if ((active1 & 0x121001L) != 0L)
            return 9;
         return -1;
      case 9:
         if ((active0 & 0x800000000080L) != 0L || (active1 & 0x4L) != 0L)
         {
            jjmatchedKind = 87;
            jjmatchedPos = 9;
            return 7;
         }
         if ((active0 & 0x100100000L) != 0L || (active1 & 0x200010L) != 0L)
            return 7;
         if ((active0 & 0xc0082000000L) != 0L)
            return 9;
         if ((active0 & 0x870e614000650300L) != 0L || (active1 & 0x400800L) != 0L)
         {
            jjmatchedKind = 88;
            jjmatchedPos = 9;
            return 9;
         }
         return -1;
      case 10:
         if ((active0 & 0x830e614000410100L) != 0L || (active1 & 0x400800L) != 0L)
         {
            jjmatchedKind = 88;
            jjmatchedPos = 10;
            return 9;
         }
         if ((active0 & 0x800000000080L) != 0L)
         {
            jjmatchedKind = 87;
            jjmatchedPos = 10;
            return 7;
         }
         if ((active1 & 0x4L) != 0L)
            return 7;
         if ((active0 & 0x400000000240200L) != 0L)
            return 9;
         return -1;
      case 11:
         if ((active0 & 0x10e610000000100L) != 0L || (active1 & 0x800L) != 0L)
         {
            jjmatchedKind = 88;
            jjmatchedPos = 11;
            return 9;
         }
         if ((active0 & 0x800000000080L) != 0L)
         {
            jjmatchedKind = 87;
            jjmatchedPos = 11;
            return 7;
         }
         if ((active0 & 0x8200004000410000L) != 0L || (active1 & 0x400000L) != 0L)
            return 9;
         return -1;
      case 12:
         if ((active0 & 0x800000000080L) != 0L)
         {
            jjmatchedKind = 87;
            jjmatchedPos = 12;
            return 7;
         }
         if ((active0 & 0x10c610000000100L) != 0L || (active1 & 0x800L) != 0L)
         {
            jjmatchedKind = 88;
            jjmatchedPos = 12;
            return 9;
         }
         if ((active0 & 0x2000000000000L) != 0L)
            return 9;
         return -1;
      case 13:
         if ((active0 & 0x80L) != 0L)
         {
            jjmatchedKind = 87;
            jjmatchedPos = 13;
            return 7;
         }
         if ((active0 & 0x10c610000000100L) != 0L || (active1 & 0x800L) != 0L)
         {
            jjmatchedKind = 88;
            jjmatchedPos = 13;
            return 9;
         }
         if ((active0 & 0x800000000000L) != 0L)
            return 7;
         return -1;
      case 14:
         if ((active0 & 0x80L) != 0L)
         {
            jjmatchedKind = 87;
            jjmatchedPos = 14;
            return 7;
         }
         if ((active0 & 0xc210000000100L) != 0L || (active1 & 0x800L) != 0L)
         {
            jjmatchedKind = 88;
            jjmatchedPos = 14;
            return 9;
         }
         if ((active0 & 0x100400000000000L) != 0L)
            return 9;
         return -1;
      case 15:
         if ((active0 & 0x80L) != 0L)
         {
            jjmatchedKind = 87;
            jjmatchedPos = 15;
            return 7;
         }
         if ((active0 & 0xc200000000100L) != 0L || (active1 & 0x800L) != 0L)
         {
            jjmatchedKind = 88;
            jjmatchedPos = 15;
            return 9;
         }
         if ((active0 & 0x10000000000L) != 0L)
            return 9;
         return -1;
      case 16:
         if ((active0 & 0x80L) != 0L)
         {
            jjmatchedKind = 87;
            jjmatchedPos = 16;
            return 7;
         }
         if ((active0 & 0x4000000000100L) != 0L || (active1 & 0x800L) != 0L)
         {
            jjmatchedKind = 88;
            jjmatchedPos = 16;
            return 9;
         }
         if ((active0 & 0x8200000000000L) != 0L)
            return 9;
         return -1;
      case 17:
         if ((active0 & 0x80L) != 0L)
         {
            jjmatchedKind = 87;
            jjmatchedPos = 17;
            return 7;
         }
         if ((active0 & 0x4000000000100L) != 0L || (active1 & 0x800L) != 0L)
            return 9;
         return -1;
      case 18:
         if ((active0 & 0x80L) != 0L)
         {
            jjmatchedKind = 87;
            jjmatchedPos = 18;
            return 7;
         }
         return -1;
      case 19:
         if ((active0 & 0x80L) != 0L)
         {
            jjmatchedKind = 87;
            jjmatchedPos = 19;
            return 7;
         }
         return -1;
      default :
         return -1;
   }
}
private final int jjStartNfa_0(int pos, long active0, long active1)
{
   return jjMoveNfa_0(jjStopStringLiteralDfa_0(pos, active0, active1), pos + 1);
}
private final int jjStopAtPos(int pos, int kind)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   return pos + 1;
}
private final int jjStartNfaWithStates_0(int pos, int kind, int state)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) { return pos + 1; }
   return jjMoveNfa_0(state, pos + 1);
}
private final int jjMoveStringLiteralDfa0_0()
{
   switch(curChar)
   {
      case 40:
         return jjStopAtPos(0, 101);
      case 41:
         return jjStopAtPos(0, 103);
      case 44:
         return jjStopAtPos(0, 97);
      case 46:
         jjmatchedKind = 106;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x400000000L);
      case 58:
         return jjMoveStringLiteralDfa1_0(0x400L, 0x0L);
      case 59:
         return jjStopAtPos(0, 96);
      case 60:
         return jjStopAtPos(0, 107);
      case 62:
         return jjStopAtPos(0, 108);
      case 65:
         return jjMoveStringLiteralDfa1_0(0xb40L, 0x0L);
      case 66:
         return jjMoveStringLiteralDfa1_0(0x7000L, 0x0L);
      case 67:
         return jjMoveStringLiteralDfa1_0(0x18000L, 0x0L);
      case 68:
         return jjMoveStringLiteralDfa1_0(0x6c0000L, 0x0L);
      case 69:
         return jjMoveStringLiteralDfa1_0(0xf000000L, 0x0L);
      case 70:
         return jjMoveStringLiteralDfa1_0(0x30000000L, 0x0L);
      case 71:
         return jjMoveStringLiteralDfa1_0(0x40000000L, 0x0L);
      case 73:
         return jjMoveStringLiteralDfa1_0(0x3e80000000L, 0x0L);
      case 76:
         return jjMoveStringLiteralDfa1_0(0x4000000000L, 0x0L);
      case 77:
         return jjMoveStringLiteralDfa1_0(0x7d8000000000L, 0x0L);
      case 78:
         return jjMoveStringLiteralDfa1_0(0x1f000000000000L, 0x0L);
      case 79:
         return jjMoveStringLiteralDfa1_0(0xb7c0000000000000L, 0x0L);
      case 82:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x3L);
      case 83:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x6e0L);
      case 84:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x7800L);
      case 85:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x30000L);
      case 86:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x180000L);
      case 87:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x400000L);
      case 91:
         return jjStopAtPos(0, 99);
      case 93:
         return jjStopAtPos(0, 100);
      case 97:
         return jjMoveStringLiteralDfa1_0(0x80L, 0x0L);
      case 99:
         return jjMoveStringLiteralDfa1_0(0x20000L, 0x0L);
      case 100:
         return jjMoveStringLiteralDfa1_0(0x100000L, 0x0L);
      case 101:
         return jjMoveStringLiteralDfa1_0(0x800000L, 0x0L);
      case 105:
         return jjMoveStringLiteralDfa1_0(0x100000000L, 0x0L);
      case 109:
         return jjMoveStringLiteralDfa1_0(0x20000000000L, 0x0L);
      case 110:
         return jjMoveStringLiteralDfa1_0(0x20800000000000L, 0x0L);
      case 111:
         return jjMoveStringLiteralDfa1_0(0x4800000000000000L, 0x0L);
      case 114:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x1cL);
      case 115:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x100L);
      case 116:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x8000L);
      case 118:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x40000L);
      case 119:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x200000L);
      case 123:
         return jjStopAtPos(0, 104);
      case 124:
         return jjStopAtPos(0, 102);
      case 125:
         return jjStopAtPos(0, 105);
      default :
         return jjMoveNfa_0(5, 0);
   }
}
private final int jjMoveStringLiteralDfa1_0(long active0, long active1)
{
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(0, active0, active1);
      return 1;
   }
   switch(curChar)
   {
      case 46:
         if ((active1 & 0x400000000L) != 0L)
            return jjStopAtPos(1, 98);
         break;
      case 58:
         return jjMoveStringLiteralDfa2_0(active0, 0x400L, active1, 0L);
      case 65:
         return jjMoveStringLiteralDfa2_0(active0, 0x5c010000000L, active1, 0x180000L);
      case 66:
         return jjMoveStringLiteralDfa2_0(active0, 0x7c0000000000000L, active1, 0L);
      case 67:
         return jjMoveStringLiteralDfa2_0(active0, 0x1000000000000040L, active1, 0L);
      case 68:
         return jjMoveStringLiteralDfa2_0(active0, 0x80000000L, active1, 0L);
      case 69:
         return jjMoveStringLiteralDfa2_0(active0, 0x2c1000L, active1, 0x823L);
      case 70:
         if ((active0 & 0x2000000000000000L) != 0L)
            return jjStartNfaWithStates_0(1, 61, 9);
         break;
      case 71:
         return jjMoveStringLiteralDfa2_0(active0, 0x100L, active1, 0L);
      case 72:
         return jjMoveStringLiteralDfa2_0(active0, 0x8000L, active1, 0L);
      case 73:
         return jjMoveStringLiteralDfa2_0(active0, 0x80000406000L, active1, 0x40L);
      case 77:
         return jjMoveStringLiteralDfa2_0(active0, 0xe00000000L, active1, 0L);
      case 78:
         return jjMoveStringLiteralDfa2_0(active0, 0x3003000000L, active1, 0x30000L);
      case 79:
         return jjMoveStringLiteralDfa2_0(active0, 0xf700000010000L, active1, 0L);
      case 80:
         return jjMoveStringLiteralDfa2_0(active0, 0x200L, active1, 0L);
      case 82:
         return jjMoveStringLiteralDfa2_0(active0, 0x8000000060000000L, active1, 0x403000L);
      case 84:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x280L);
      case 85:
         return jjMoveStringLiteralDfa2_0(active0, 0x10000000000800L, active1, 0L);
      case 88:
         return jjMoveStringLiteralDfa2_0(active0, 0xc000000L, active1, 0L);
      case 89:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x4400L);
      case 97:
         return jjMoveStringLiteralDfa2_0(active0, 0x20000000000L, active1, 0x40000L);
      case 98:
         return jjMoveStringLiteralDfa2_0(active0, 0x800000000000000L, active1, 0L);
      case 99:
         return jjMoveStringLiteralDfa2_0(active0, 0x80L, active1, 0L);
      case 100:
         return jjMoveStringLiteralDfa2_0(active0, 0x100000000L, active1, 0L);
      case 101:
         return jjMoveStringLiteralDfa2_0(active0, 0x100000L, active1, 0x1cL);
      case 109:
         return jjMoveStringLiteralDfa2_0(active0, 0x800000L, active1, 0L);
      case 111:
         return jjMoveStringLiteralDfa2_0(active0, 0x800000000000L, active1, 0L);
      case 112:
         return jjMoveStringLiteralDfa2_0(active0, 0x4000000000000000L, active1, 0L);
      case 114:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x200000L);
      case 116:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x100L);
      case 117:
         return jjMoveStringLiteralDfa2_0(active0, 0x20000000020000L, active1, 0L);
      case 121:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x8000L);
      default :
         break;
   }
   return jjStartNfa_0(0, active0, active1);
}
private final int jjMoveStringLiteralDfa2_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(0, old0, old1); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(1, active0, active1);
      return 2;
   }
   switch(curChar)
   {
      case 61:
         if ((active0 & 0x400L) != 0L)
            return jjStopAtPos(2, 10);
         break;
      case 65:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x1080L);
      case 67:
         return jjMoveStringLiteralDfa3_0(active0, 0x8000000040L, active1, 0L);
      case 68:
         if ((active0 & 0x1000000L) != 0L)
            return jjStartNfaWithStates_0(2, 24, 9);
         return jjMoveStringLiteralDfa3_0(active0, 0x701000000000L, active1, 0L);
      case 69:
         return jjMoveStringLiteralDfa3_0(active0, 0x80000100L, active1, 0L);
      case 70:
         return jjMoveStringLiteralDfa3_0(active0, 0xc0000L, active1, 0x1L);
      case 71:
         return jjMoveStringLiteralDfa3_0(active0, 0x8000000000001800L, active1, 0L);
      case 73:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x430000L);
      case 74:
         return jjMoveStringLiteralDfa3_0(active0, 0x7c0000000000000L, active1, 0L);
      case 76:
         return jjMoveStringLiteralDfa3_0(active0, 0x10000010000000L, active1, 0x80000L);
      case 78:
         return jjMoveStringLiteralDfa3_0(active0, 0x90000010000L, active1, 0x400L);
      case 79:
         return jjMoveStringLiteralDfa3_0(active0, 0x60008000L, active1, 0L);
      case 80:
         return jjMoveStringLiteralDfa3_0(active0, 0xe0c000200L, active1, 0x4000L);
      case 81:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x20L);
      case 82:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x100200L);
      case 83:
         return jjMoveStringLiteralDfa3_0(active0, 0x4000600000L, active1, 0L);
      case 84:
         if ((active0 & 0x2000L) != 0L)
         {
            jjmatchedKind = 13;
            jjmatchedPos = 2;
         }
         return jjMoveStringLiteralDfa3_0(active0, 0x100f002002004000L, active1, 0L);
      case 85:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x2000L);
      case 86:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x2L);
      case 88:
         return jjMoveStringLiteralDfa3_0(active0, 0x40000000000L, active1, 0x800L);
      case 90:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x40L);
      case 97:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x1cL);
      case 99:
         return jjMoveStringLiteralDfa3_0(active0, 0x80L, active1, 0L);
      case 101:
         return jjMoveStringLiteralDfa3_0(active0, 0x100000000L, active1, 0L);
      case 105:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x200000L);
      case 108:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x40000L);
      case 109:
         return jjMoveStringLiteralDfa3_0(active0, 0x20000000000000L, active1, 0L);
      case 110:
         return jjMoveStringLiteralDfa3_0(active0, 0x20000000000L, active1, 0L);
      case 112:
         return jjMoveStringLiteralDfa3_0(active0, 0x900000L, active1, 0x8000L);
      case 114:
         return jjMoveStringLiteralDfa3_0(active0, 0x20000L, active1, 0x100L);
      case 115:
         return jjMoveStringLiteralDfa3_0(active0, 0x800000000000000L, active1, 0L);
      case 116:
         return jjMoveStringLiteralDfa3_0(active0, 0x4000800000000000L, active1, 0L);
      default :
         break;
   }
   return jjStartNfa_0(1, active0, active1);
}
private final int jjMoveStringLiteralDfa3_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(1, old0, old1); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(2, active0, active1);
      return 3;
   }
   switch(curChar)
   {
      case 45:
         return jjMoveStringLiteralDfa4_0(active0, 0x8c0000000000L, active1, 0L);
      case 65:
         return jjMoveStringLiteralDfa4_0(active0, 0x8001000000000000L, active1, 0L);
      case 67:
         return jjMoveStringLiteralDfa4_0(active0, 0x200000L, active1, 0L);
      case 68:
         return jjMoveStringLiteralDfa4_0(active0, 0x10000000000L, active1, 0L);
      case 69:
         if ((active1 & 0x40L) != 0L)
            return jjStartNfaWithStates_0(3, 70, 9);
         else if ((active1 & 0x2000L) != 0L)
            return jjStartNfaWithStates_0(3, 77, 9);
         else if ((active1 & 0x4000L) != 0L)
            return jjStartNfaWithStates_0(3, 78, 9);
         return jjMoveStringLiteralDfa4_0(active0, 0x17c0003002000040L, active1, 0x1L);
      case 73:
         return jjMoveStringLiteralDfa4_0(active0, 0xe000000049000L, active1, 0x100202L);
      case 76:
         if ((active0 & 0x10000000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 52, 9);
         return jjMoveStringLiteralDfa4_0(active0, 0x604000200L, active1, 0L);
      case 77:
         if ((active0 & 0x20000000L) != 0L)
            return jjStartNfaWithStates_0(3, 29, 9);
         return jjMoveStringLiteralDfa4_0(active0, 0x800L, active1, 0L);
      case 78:
         return jjMoveStringLiteralDfa4_0(active0, 0x80000100L, active1, 0L);
      case 79:
         return jjMoveStringLiteralDfa4_0(active0, 0x808000000L, active1, 0L);
      case 80:
         return jjMoveStringLiteralDfa4_0(active0, 0x400000L, active1, 0x1000L);
      case 82:
         return jjMoveStringLiteralDfa4_0(active0, 0x8000000000L, active1, 0L);
      case 83:
         if ((active0 & 0x4000L) != 0L)
            return jjStartNfaWithStates_0(3, 14, 9);
         return jjMoveStringLiteralDfa4_0(active0, 0x10000000L, active1, 0L);
      case 84:
         return jjMoveStringLiteralDfa4_0(active0, 0x4000010000L, active1, 0x410c80L);
      case 85:
         return jjMoveStringLiteralDfa4_0(active0, 0x700040000000L, active1, 0x80020L);
      case 86:
         return jjMoveStringLiteralDfa4_0(active0, 0x80000L, active1, 0x20000L);
      case 98:
         return jjMoveStringLiteralDfa4_0(active0, 0x20000000000000L, active1, 0L);
      case 100:
         return jjMoveStringLiteralDfa4_0(active0, 0x20000000000L, active1, 0x1cL);
      case 101:
         if ((active1 & 0x8000L) != 0L)
            return jjStartNfaWithStates_0(3, 79, 7);
         return jjMoveStringLiteralDfa4_0(active0, 0x80L, active1, 0L);
      case 105:
         return jjMoveStringLiteralDfa4_0(active0, 0x4000000000000000L, active1, 0x100L);
      case 110:
         return jjMoveStringLiteralDfa4_0(active0, 0x100000000L, active1, 0L);
      case 111:
         return jjMoveStringLiteralDfa4_0(active0, 0x800000000000000L, active1, 0L);
      case 114:
         return jjMoveStringLiteralDfa4_0(active0, 0x120000L, active1, 0L);
      case 116:
         return jjMoveStringLiteralDfa4_0(active0, 0x800000L, active1, 0x200000L);
      case 117:
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x40000L);
      default :
         break;
   }
   return jjStartNfa_0(2, active0, active1);
}
private final int jjMoveStringLiteralDfa4_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(2, old0, old1); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(3, active0, active1);
      return 4;
   }
   switch(curChar)
   {
      case 45:
         return jjMoveStringLiteralDfa5_0(active0, 0x4000000000L, active1, 0x101cL);
      case 65:
         return jjMoveStringLiteralDfa5_0(active0, 0xd0000090000L, active1, 0x100400L);
      case 67:
         return jjMoveStringLiteralDfa5_0(active0, 0x7c0000000008000L, active1, 0L);
      case 69:
         if ((active0 & 0x10000000L) != 0L)
            return jjStartNfaWithStates_0(4, 28, 9);
         else if ((active1 & 0x80000L) != 0L)
            return jjStartNfaWithStates_0(4, 83, 9);
         return jjMoveStringLiteralDfa5_0(active0, 0x800L, active1, 0x420020L);
      case 70:
         return jjMoveStringLiteralDfa5_0(active0, 0xe000000000000L, active1, 0L);
      case 71:
         return jjMoveStringLiteralDfa5_0(active0, 0x2000000000L, active1, 0L);
      case 73:
         return jjMoveStringLiteralDfa5_0(active0, 0x604000200L, active1, 0L);
      case 76:
         return jjMoveStringLiteralDfa5_0(active0, 0x700000400000L, active1, 0L);
      case 78:
         if ((active0 & 0x1000L) != 0L)
            return jjStartNfaWithStates_0(4, 12, 9);
         return jjMoveStringLiteralDfa5_0(active0, 0x8000000000040000L, active1, 0x200L);
      case 79:
         if ((active0 & 0x8000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 39, 9);
         break;
      case 80:
         if ((active0 & 0x40000000L) != 0L)
            return jjStartNfaWithStates_0(4, 30, 9);
         break;
      case 82:
         return jjMoveStringLiteralDfa5_0(active0, 0x80a200000L, active1, 0x1L);
      case 83:
         if ((active1 & 0x10000L) != 0L)
            return jjStartNfaWithStates_0(4, 80, 9);
         return jjMoveStringLiteralDfa5_0(active0, 0x40L, active1, 0x2L);
      case 84:
         if ((active0 & 0x1000000000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 60, 9);
         return jjMoveStringLiteralDfa5_0(active0, 0x1000080000100L, active1, 0L);
      case 85:
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x880L);
      case 88:
         if ((active0 & 0x1000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 36, 9);
         break;
      case 97:
         return jjMoveStringLiteralDfa5_0(active0, 0x820000000000L, active1, 0L);
      case 101:
         if ((active1 & 0x40000L) != 0L)
            return jjStartNfaWithStates_0(4, 82, 7);
         return jjMoveStringLiteralDfa5_0(active0, 0x20000000120000L, active1, 0x200000L);
      case 108:
         return jjMoveStringLiteralDfa5_0(active0, 0x800000000000000L, active1, 0L);
      case 110:
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x100L);
      case 111:
         return jjMoveStringLiteralDfa5_0(active0, 0x4000000000000000L, active1, 0L);
      case 115:
         return jjMoveStringLiteralDfa5_0(active0, 0x80L, active1, 0L);
      case 116:
         return jjMoveStringLiteralDfa5_0(active0, 0x100000000L, active1, 0L);
      case 121:
         if ((active0 & 0x800000L) != 0L)
            return jjStartNfaWithStates_0(4, 23, 7);
         break;
      default :
         break;
   }
   return jjStartNfa_0(3, active0, active1);
}
private final int jjMoveStringLiteralDfa5_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(3, old0, old1); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(4, active0, active1);
      return 5;
   }
   switch(curChar)
   {
      case 45:
         return jjMoveStringLiteralDfa6_0(active0, 0x100L, active1, 0x600000L);
      case 65:
         return jjMoveStringLiteralDfa6_0(active0, 0x400000L, active1, 0x800L);
      case 66:
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0x100000L);
      case 67:
         return jjMoveStringLiteralDfa6_0(active0, 0xc0204010200L, active1, 0L);
      case 69:
         if ((active0 & 0x8000L) != 0L)
            return jjStartNfaWithStates_0(5, 15, 9);
         else if ((active0 & 0x100000000000L) != 0L)
         {
            jjmatchedKind = 44;
            jjmatchedPos = 5;
         }
         return jjMoveStringLiteralDfa6_0(active0, 0x602400000000L, active1, 0x1L);
      case 71:
         if ((active1 & 0x200L) != 0L)
            return jjStartNfaWithStates_0(5, 73, 9);
         break;
      case 73:
         return jjMoveStringLiteralDfa6_0(active0, 0x800f000080240000L, active1, 0x2L);
      case 76:
         if ((active0 & 0x80000L) != 0L)
            return jjStartNfaWithStates_0(5, 19, 9);
         break;
      case 78:
         return jjMoveStringLiteralDfa6_0(active0, 0x800L, active1, 0x20L);
      case 80:
         return jjMoveStringLiteralDfa6_0(active0, 0x2000000L, active1, 0L);
      case 82:
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0x20000L);
      case 83:
         if ((active0 & 0x40L) != 0L)
            return jjStartNfaWithStates_0(5, 6, 9);
         else if ((active1 & 0x80L) != 0L)
            return jjStartNfaWithStates_0(5, 71, 9);
         break;
      case 84:
         if ((active0 & 0x40000000000000L) != 0L)
         {
            jjmatchedKind = 54;
            jjmatchedPos = 5;
         }
         return jjMoveStringLiteralDfa6_0(active0, 0x780010808000000L, active1, 0x1000L);
      case 85:
         return jjMoveStringLiteralDfa6_0(active0, 0x4000000000L, active1, 0L);
      case 88:
         if ((active1 & 0x400L) != 0L)
            return jjStartNfaWithStates_0(5, 74, 9);
         break;
      case 99:
         return jjMoveStringLiteralDfa6_0(active0, 0x800000100000L, active1, 0x4L);
      case 101:
         return jjMoveStringLiteralDfa6_0(active0, 0x800000000000000L, active1, 0L);
      case 103:
         if ((active1 & 0x100L) != 0L)
            return jjStartNfaWithStates_0(5, 72, 7);
         break;
      case 105:
         return jjMoveStringLiteralDfa6_0(active0, 0x100000000L, active1, 0L);
      case 110:
         return jjMoveStringLiteralDfa6_0(active0, 0x4000000000020000L, active1, 0L);
      case 111:
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0x8L);
      case 114:
         if ((active0 & 0x20000000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 53, 7);
         break;
      case 115:
         return jjMoveStringLiteralDfa6_0(active0, 0x80L, active1, 0L);
      case 116:
         return jjMoveStringLiteralDfa6_0(active0, 0x20000000000L, active1, 0L);
      case 119:
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0x10L);
      default :
         break;
   }
   return jjStartNfa_0(4, active0, active1);
}
private final int jjMoveStringLiteralDfa6_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(4, old0, old1); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(5, active0, active1);
      return 6;
   }
   switch(curChar)
   {
      case 45:
         return jjMoveStringLiteralDfa7_0(active0, 0x700600000000000L, active1, 0L);
      case 65:
         return jjMoveStringLiteralDfa7_0(active0, 0x200L, active1, 0L);
      case 67:
         return jjMoveStringLiteralDfa7_0(active0, 0xe0c0000000100L, active1, 0x20L);
      case 68:
         if ((active0 & 0x400000000L) != 0L)
            return jjStartNfaWithStates_0(6, 34, 9);
         break;
      case 70:
         return jjMoveStringLiteralDfa7_0(active0, 0x80000000L, active1, 0L);
      case 73:
         return jjMoveStringLiteralDfa7_0(active0, 0x204000000L, active1, 0L);
      case 76:
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0x100800L);
      case 78:
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0x1L);
      case 79:
         return jjMoveStringLiteralDfa7_0(active0, 0x1010000000000L, active1, 0x2L);
      case 80:
         return jjMoveStringLiteralDfa7_0(active0, 0x4000200000L, active1, 0L);
      case 82:
         if ((active0 & 0x2000000000L) != 0L)
            return jjStartNfaWithStates_0(6, 37, 9);
         return jjMoveStringLiteralDfa7_0(active0, 0x2000000L, active1, 0L);
      case 83:
         if ((active0 & 0x8000000L) != 0L)
            return jjStartNfaWithStates_0(6, 27, 9);
         else if ((active0 & 0x800000000L) != 0L)
            return jjStartNfaWithStates_0(6, 35, 9);
         else if ((active0 & 0x80000000000000L) != 0L)
            return jjStartNfaWithStates_0(6, 55, 9);
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0x420000L);
      case 84:
         return jjMoveStringLiteralDfa7_0(active0, 0x50800L, active1, 0L);
      case 89:
         return jjMoveStringLiteralDfa7_0(active0, 0x400000L, active1, 0x1000L);
      case 90:
         return jjMoveStringLiteralDfa7_0(active0, 0x8000000000000000L, active1, 0L);
      case 97:
         return jjMoveStringLiteralDfa7_0(active0, 0x4000000000100000L, active1, 0L);
      case 99:
         return jjMoveStringLiteralDfa7_0(active0, 0x800000000000L, active1, 0L);
      case 102:
         return jjMoveStringLiteralDfa7_0(active0, 0x100000000L, active1, 0L);
      case 105:
         return jjMoveStringLiteralDfa7_0(active0, 0x80L, active1, 0L);
      case 110:
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0x8L);
      case 111:
         return jjMoveStringLiteralDfa7_0(active0, 0x20000000000L, active1, 0x200000L);
      case 114:
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0x14L);
      case 116:
         if ((active0 & 0x20000L) != 0L)
            return jjStartNfaWithStates_0(6, 17, 7);
         return jjMoveStringLiteralDfa7_0(active0, 0x800000000000000L, active1, 0L);
      default :
         break;
   }
   return jjStartNfa_0(5, active0, active1);
}
private final int jjMoveStringLiteralDfa7_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(5, old0, old1); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(6, active0, active1);
      return 7;
   }
   switch(curChar)
   {
      case 45:
         return jjMoveStringLiteralDfa8_0(active0, 0x410000L, active1, 0x800L);
      case 65:
         return jjMoveStringLiteralDfa8_0(active0, 0x800e000000000100L, active1, 0x20000L);
      case 67:
         return jjMoveStringLiteralDfa8_0(active0, 0x200000000000L, active1, 0x1L);
      case 68:
         return jjMoveStringLiteralDfa8_0(active0, 0x4000000000L, active1, 0L);
      case 69:
         if ((active1 & 0x20L) != 0L)
            return jjStartNfaWithStates_0(7, 69, 9);
         return jjMoveStringLiteralDfa8_0(active0, 0xc0000000000L, active1, 0x100000L);
      case 71:
         return jjMoveStringLiteralDfa8_0(active0, 0x200000000000000L, active1, 0L);
      case 73:
         return jjMoveStringLiteralDfa8_0(active0, 0x100400082040000L, active1, 0L);
      case 78:
         if ((active0 & 0x1000000000000L) != 0L)
            return jjStartNfaWithStates_0(7, 48, 9);
         else if ((active1 & 0x2L) != 0L)
            return jjStartNfaWithStates_0(7, 65, 9);
         break;
      case 80:
         return jjMoveStringLiteralDfa8_0(active0, 0L, active1, 0x1000L);
      case 82:
         return jjMoveStringLiteralDfa8_0(active0, 0x10000000000L, active1, 0L);
      case 83:
         if ((active0 & 0x800L) != 0L)
            return jjStartNfaWithStates_0(7, 11, 9);
         break;
      case 84:
         if ((active0 & 0x4000000L) != 0L)
            return jjStartNfaWithStates_0(7, 26, 9);
         else if ((active0 & 0x200000000L) != 0L)
            return jjStartNfaWithStates_0(7, 33, 9);
         return jjMoveStringLiteralDfa8_0(active0, 0x400000000200200L, active1, 0L);
      case 89:
         return jjMoveStringLiteralDfa8_0(active0, 0L, active1, 0x400000L);
      case 98:
         return jjMoveStringLiteralDfa8_0(active0, 0x80L, active1, 0L);
      case 101:
         if ((active0 & 0x800000000000000L) != 0L)
            return jjStartNfaWithStates_0(7, 59, 7);
         return jjMoveStringLiteralDfa8_0(active0, 0x800000000000L, active1, 0x4L);
      case 105:
         return jjMoveStringLiteralDfa8_0(active0, 0x100000000L, active1, 0x10L);
      case 108:
         if ((active0 & 0x4000000000000000L) != 0L)
            return jjStartNfaWithStates_0(7, 62, 7);
         return jjMoveStringLiteralDfa8_0(active0, 0L, active1, 0x8L);
      case 110:
         return jjMoveStringLiteralDfa8_0(active0, 0L, active1, 0x200000L);
      case 114:
         return jjMoveStringLiteralDfa8_0(active0, 0x20000000000L, active1, 0L);
      case 116:
         return jjMoveStringLiteralDfa8_0(active0, 0x100000L, active1, 0L);
      default :
         break;
   }
   return jjStartNfa_0(6, active0, active1);
}
private final int jjMoveStringLiteralDfa8_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(6, old0, old1); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(7, active0, active1);
      return 8;
   }
   switch(curChar)
   {
      case 65:
         return jjMoveStringLiteralDfa9_0(active0, 0x4000000000L, active1, 0L);
      case 67:
         return jjMoveStringLiteralDfa9_0(active0, 0L, active1, 0x800L);
      case 68:
         return jjMoveStringLiteralDfa9_0(active0, 0x100400000000000L, active1, 0L);
      case 69:
         if ((active1 & 0x1L) != 0L)
            return jjStartNfaWithStates_0(8, 64, 9);
         else if ((active1 & 0x1000L) != 0L)
            return jjStartNfaWithStates_0(8, 76, 9);
         return jjMoveStringLiteralDfa9_0(active0, 0x80000000L, active1, 0L);
      case 72:
         return jjMoveStringLiteralDfa9_0(active0, 0x400000L, active1, 0L);
      case 73:
         return jjMoveStringLiteralDfa9_0(active0, 0x210200L, active1, 0L);
      case 76:
         if ((active1 & 0x20000L) != 0L)
            return jjStartNfaWithStates_0(8, 81, 9);
         break;
      case 78:
         return jjMoveStringLiteralDfa9_0(active0, 0L, active1, 0x400000L);
      case 79:
         return jjMoveStringLiteralDfa9_0(active0, 0x200000040000L, active1, 0L);
      case 80:
         return jjMoveStringLiteralDfa9_0(active0, 0x100L, active1, 0L);
      case 82:
         return jjMoveStringLiteralDfa9_0(active0, 0x200000000000000L, active1, 0L);
      case 83:
         if ((active1 & 0x100000L) != 0L)
            return jjStartNfaWithStates_0(8, 84, 9);
         return jjMoveStringLiteralDfa9_0(active0, 0xc0002000000L, active1, 0L);
      case 84:
         return jjMoveStringLiteralDfa9_0(active0, 0x800e000000000000L, active1, 0L);
      case 89:
         return jjMoveStringLiteralDfa9_0(active0, 0x400010000000000L, active1, 0L);
      case 97:
         return jjMoveStringLiteralDfa9_0(active0, 0L, active1, 0x4L);
      case 101:
         return jjMoveStringLiteralDfa9_0(active0, 0x100100000L, active1, 0L);
      case 108:
         return jjMoveStringLiteralDfa9_0(active0, 0x80L, active1, 0x200000L);
      case 115:
         return jjMoveStringLiteralDfa9_0(active0, 0x800000000000L, active1, 0L);
      case 116:
         return jjMoveStringLiteralDfa9_0(active0, 0L, active1, 0x10L);
      case 121:
         if ((active0 & 0x20000000000L) != 0L)
            return jjStartNfaWithStates_0(8, 41, 7);
         else if ((active1 & 0x8L) != 0L)
            return jjStartNfaWithStates_0(8, 67, 7);
         break;
      default :
         break;
   }
   return jjStartNfa_0(7, active0, active1);
}
private final int jjMoveStringLiteralDfa9_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(7, old0, old1); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(8, active0, active1);
      return 9;
   }
   switch(curChar)
   {
      case 45:
         return jjMoveStringLiteralDfa10_0(active0, 0x10000000000L, active1, 0L);
      case 65:
         return jjMoveStringLiteralDfa10_0(active0, 0x100L, active1, 0L);
      case 69:
         if ((active0 & 0x2000000L) != 0L)
            return jjStartNfaWithStates_0(9, 25, 9);
         return jjMoveStringLiteralDfa10_0(active0, 0x100400000000000L, active1, 0L);
      case 73:
         return jjMoveStringLiteralDfa10_0(active0, 0x800e000000400000L, active1, 0L);
      case 77:
         return jjMoveStringLiteralDfa10_0(active0, 0x200000000000L, active1, 0L);
      case 78:
         return jjMoveStringLiteralDfa10_0(active0, 0x50000L, active1, 0L);
      case 79:
         return jjMoveStringLiteralDfa10_0(active0, 0x200000000200200L, active1, 0x800L);
      case 80:
         return jjMoveStringLiteralDfa10_0(active0, 0x400000000000000L, active1, 0L);
      case 82:
         if ((active0 & 0x80000000L) != 0L)
            return jjStartNfaWithStates_0(9, 31, 9);
         break;
      case 83:
         if ((active0 & 0x40000000000L) != 0L)
            return jjStartNfaWithStates_0(9, 42, 9);
         else if ((active0 & 0x80000000000L) != 0L)
            return jjStartNfaWithStates_0(9, 43, 9);
         break;
      case 84:
         return jjMoveStringLiteralDfa10_0(active0, 0x4000000000L, active1, 0x400000L);
      case 100:
         if ((active0 & 0x100000L) != 0L)
            return jjStartNfaWithStates_0(9, 20, 7);
         break;
      case 101:
         if ((active1 & 0x10L) != 0L)
            return jjStartNfaWithStates_0(9, 68, 7);
         return jjMoveStringLiteralDfa10_0(active0, 0x80L, active1, 0L);
      case 114:
         if ((active0 & 0x100000000L) != 0L)
            return jjStartNfaWithStates_0(9, 32, 7);
         break;
      case 115:
         return jjMoveStringLiteralDfa10_0(active0, 0x800000000000L, active1, 0L);
      case 116:
         return jjMoveStringLiteralDfa10_0(active0, 0L, active1, 0x4L);
      case 121:
         if ((active1 & 0x200000L) != 0L)
            return jjStartNfaWithStates_0(9, 85, 7);
         break;
      default :
         break;
   }
   return jjStartNfa_0(8, active0, active1);
}
private final int jjMoveStringLiteralDfa10_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(8, old0, old1); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(9, active0, active1);
      return 10;
   }
   switch(curChar)
   {
      case 45:
         return jjMoveStringLiteralDfa11_0(active0, 0x80L, active1, 0L);
      case 65:
         return jjMoveStringLiteralDfa11_0(active0, 0L, active1, 0x400000L);
      case 66:
         return jjMoveStringLiteralDfa11_0(active0, 0x100L, active1, 0L);
      case 69:
         if ((active0 & 0x400000000000000L) != 0L)
            return jjStartNfaWithStates_0(10, 58, 9);
         return jjMoveStringLiteralDfa11_0(active0, 0x4000000000L, active1, 0L);
      case 70:
         return jjMoveStringLiteralDfa11_0(active0, 0x10000L, active1, 0L);
      case 71:
         return jjMoveStringLiteralDfa11_0(active0, 0x10000000000L, active1, 0L);
      case 78:
         if ((active0 & 0x200L) != 0L)
            return jjStartNfaWithStates_0(10, 9, 9);
         else if ((active0 & 0x200000L) != 0L)
            return jjStartNfaWithStates_0(10, 21, 9);
         return jjMoveStringLiteralDfa11_0(active0, 0x100400000400000L, active1, 0x800L);
      case 79:
         return jjMoveStringLiteralDfa11_0(active0, 0x800e000000000000L, active1, 0L);
      case 80:
         return jjMoveStringLiteralDfa11_0(active0, 0x200000000000L, active1, 0L);
      case 83:
         if ((active0 & 0x40000L) != 0L)
            return jjStartNfaWithStates_0(10, 18, 9);
         break;
      case 85:
         return jjMoveStringLiteralDfa11_0(active0, 0x200000000000000L, active1, 0L);
      case 101:
         if ((active1 & 0x4L) != 0L)
            return jjStartNfaWithStates_0(10, 66, 7);
         break;
      case 105:
         return jjMoveStringLiteralDfa11_0(active0, 0x800000000000L, active1, 0L);
      default :
         break;
   }
   return jjStartNfa_0(9, active0, active1);
}
private final int jjMoveStringLiteralDfa11_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(9, old0, old1); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(10, active0, active1);
      return 11;
   }
   switch(curChar)
   {
      case 68:
         if ((active0 & 0x4000000000L) != 0L)
            return jjStartNfaWithStates_0(11, 38, 9);
         break;
      case 73:
         return jjMoveStringLiteralDfa12_0(active0, 0x100L, active1, 0L);
      case 76:
         return jjMoveStringLiteralDfa12_0(active0, 0x200000000000L, active1, 0L);
      case 78:
         if ((active0 & 0x8000000000000000L) != 0L)
            return jjStartNfaWithStates_0(11, 63, 9);
         return jjMoveStringLiteralDfa12_0(active0, 0xe000000000000L, active1, 0L);
      case 79:
         if ((active0 & 0x10000L) != 0L)
            return jjStartNfaWithStates_0(11, 16, 9);
         break;
      case 80:
         if ((active0 & 0x200000000000000L) != 0L)
            return jjStartNfaWithStates_0(11, 57, 9);
         break;
      case 82:
         return jjMoveStringLiteralDfa12_0(active0, 0x10000000000L, active1, 0L);
      case 84:
         if ((active0 & 0x400000L) != 0L)
            return jjStartNfaWithStates_0(11, 22, 9);
         return jjMoveStringLiteralDfa12_0(active0, 0x100400000000000L, active1, 0L);
      case 86:
         return jjMoveStringLiteralDfa12_0(active0, 0L, active1, 0x800L);
      case 88:
         if ((active1 & 0x400000L) != 0L)
            return jjStartNfaWithStates_0(11, 86, 9);
         break;
      case 98:
         return jjMoveStringLiteralDfa12_0(active0, 0x800000000000L, active1, 0L);
      case 102:
         return jjMoveStringLiteralDfa12_0(active0, 0x80L, active1, 0L);
      default :
         break;
   }
   return jjStartNfa_0(10, active0, active1);
}
private final int jjMoveStringLiteralDfa12_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(10, old0, old1); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(11, active0, active1);
      return 12;
   }
   switch(curChar)
   {
      case 45:
         return jjMoveStringLiteralDfa13_0(active0, 0xc000000000000L, active1, 0L);
      case 69:
         return jjMoveStringLiteralDfa13_0(active0, 0L, active1, 0x800L);
      case 73:
         return jjMoveStringLiteralDfa13_0(active0, 0x100600000000000L, active1, 0L);
      case 76:
         return jjMoveStringLiteralDfa13_0(active0, 0x100L, active1, 0L);
      case 79:
         return jjMoveStringLiteralDfa13_0(active0, 0x10000000000L, active1, 0L);
      case 83:
         if ((active0 & 0x2000000000000L) != 0L)
            return jjStartNfaWithStates_0(12, 49, 9);
         break;
      case 108:
         return jjMoveStringLiteralDfa13_0(active0, 0x800000000000L, active1, 0L);
      case 111:
         return jjMoveStringLiteralDfa13_0(active0, 0x80L, active1, 0L);
      default :
         break;
   }
   return jjStartNfa_0(11, active0, active1);
}
private final int jjMoveStringLiteralDfa13_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(11, old0, old1); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(12, active0, active1);
      return 13;
   }
   switch(curChar)
   {
      case 65:
         return jjMoveStringLiteralDfa14_0(active0, 0x200000000000L, active1, 0L);
      case 71:
         return jjMoveStringLiteralDfa14_0(active0, 0x4000000000000L, active1, 0L);
      case 73:
         return jjMoveStringLiteralDfa14_0(active0, 0x100L, active1, 0L);
      case 78:
         return jjMoveStringLiteralDfa14_0(active0, 0L, active1, 0x800L);
      case 84:
         return jjMoveStringLiteralDfa14_0(active0, 0x108400000000000L, active1, 0L);
      case 85:
         return jjMoveStringLiteralDfa14_0(active0, 0x10000000000L, active1, 0L);
      case 101:
         if ((active0 & 0x800000000000L) != 0L)
            return jjStartNfaWithStates_0(13, 47, 7);
         break;
      case 114:
         return jjMoveStringLiteralDfa14_0(active0, 0x80L, active1, 0L);
      default :
         break;
   }
   return jjStartNfa_0(12, active0, active1);
}
private final int jjMoveStringLiteralDfa14_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(12, old0, old1); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(13, active0, active1);
      return 14;
   }
   switch(curChar)
   {
      case 45:
         return jjMoveStringLiteralDfa15_0(active0, 0x80L, active1, 0L);
      case 78:
         return jjMoveStringLiteralDfa15_0(active0, 0x200000000000L, active1, 0L);
      case 80:
         return jjMoveStringLiteralDfa15_0(active0, 0x10000000000L, active1, 0L);
      case 82:
         return jjMoveStringLiteralDfa15_0(active0, 0x4000000000000L, active1, 0L);
      case 84:
         return jjMoveStringLiteralDfa15_0(active0, 0x100L, active1, 0x800L);
      case 89:
         if ((active0 & 0x400000000000L) != 0L)
            return jjStartNfaWithStates_0(14, 46, 9);
         else if ((active0 & 0x100000000000000L) != 0L)
            return jjStartNfaWithStates_0(14, 56, 9);
         return jjMoveStringLiteralDfa15_0(active0, 0x8000000000000L, active1, 0L);
      default :
         break;
   }
   return jjStartNfa_0(13, active0, active1);
}
private final int jjMoveStringLiteralDfa15_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(13, old0, old1); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(14, active0, active1);
      return 15;
   }
   switch(curChar)
   {
      case 67:
         return jjMoveStringLiteralDfa16_0(active0, 0x200000000000L, active1, 0L);
      case 73:
         return jjMoveStringLiteralDfa16_0(active0, 0x100L, active1, 0x800L);
      case 79:
         return jjMoveStringLiteralDfa16_0(active0, 0x4000000000000L, active1, 0L);
      case 80:
         return jjMoveStringLiteralDfa16_0(active0, 0x8000000000000L, active1, 0L);
      case 83:
         if ((active0 & 0x10000000000L) != 0L)
            return jjStartNfaWithStates_0(15, 40, 9);
         break;
      case 110:
         return jjMoveStringLiteralDfa16_0(active0, 0x80L, active1, 0L);
      default :
         break;
   }
   return jjStartNfa_0(14, active0, active1);
}
private final int jjMoveStringLiteralDfa16_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(14, old0, old1); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(15, active0, active1);
      return 16;
   }
   switch(curChar)
   {
      case 69:
         if ((active0 & 0x200000000000L) != 0L)
            return jjStartNfaWithStates_0(16, 45, 9);
         else if ((active0 & 0x8000000000000L) != 0L)
            return jjStartNfaWithStates_0(16, 51, 9);
         return jjMoveStringLiteralDfa17_0(active0, 0x100L, active1, 0L);
      case 79:
         return jjMoveStringLiteralDfa17_0(active0, 0L, active1, 0x800L);
      case 85:
         return jjMoveStringLiteralDfa17_0(active0, 0x4000000000000L, active1, 0L);
      case 111:
         return jjMoveStringLiteralDfa17_0(active0, 0x80L, active1, 0L);
      default :
         break;
   }
   return jjStartNfa_0(15, active0, active1);
}
private final int jjMoveStringLiteralDfa17_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(15, old0, old1); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(16, active0, active1);
      return 17;
   }
   switch(curChar)
   {
      case 78:
         if ((active1 & 0x800L) != 0L)
            return jjStartNfaWithStates_0(17, 75, 9);
         break;
      case 80:
         if ((active0 & 0x4000000000000L) != 0L)
            return jjStartNfaWithStates_0(17, 50, 9);
         break;
      case 83:
         if ((active0 & 0x100L) != 0L)
            return jjStartNfaWithStates_0(17, 8, 9);
         break;
      case 116:
         return jjMoveStringLiteralDfa18_0(active0, 0x80L, active1, 0L);
      default :
         break;
   }
   return jjStartNfa_0(16, active0, active1);
}
private final int jjMoveStringLiteralDfa18_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(16, old0, old1); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(17, active0, 0L);
      return 18;
   }
   switch(curChar)
   {
      case 105:
         return jjMoveStringLiteralDfa19_0(active0, 0x80L);
      default :
         break;
   }
   return jjStartNfa_0(17, active0, 0L);
}
private final int jjMoveStringLiteralDfa19_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(17, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(18, active0, 0L);
      return 19;
   }
   switch(curChar)
   {
      case 102:
         return jjMoveStringLiteralDfa20_0(active0, 0x80L);
      default :
         break;
   }
   return jjStartNfa_0(18, active0, 0L);
}
private final int jjMoveStringLiteralDfa20_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(18, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(19, active0, 0L);
      return 20;
   }
   switch(curChar)
   {
      case 121:
         if ((active0 & 0x80L) != 0L)
            return jjStartNfaWithStates_0(20, 7, 7);
         break;
      default :
         break;
   }
   return jjStartNfa_0(19, active0, 0L);
}
private final void jjCheckNAdd(int state)
{
   if (jjrounds[state] != jjround)
   {
      jjstateSet[jjnewStateCnt++] = state;
      jjrounds[state] = jjround;
   }
}
private final void jjAddStates(int start, int end)
{
   do {
      jjstateSet[jjnewStateCnt++] = jjnextStates[start];
   } while (start++ != end);
}
private final void jjCheckNAddTwoStates(int state1, int state2)
{
   jjCheckNAdd(state1);
   jjCheckNAdd(state2);
}
private final void jjCheckNAddStates(int start, int end)
{
   do {
      jjCheckNAdd(jjnextStates[start]);
   } while (start++ != end);
}
private final void jjCheckNAddStates(int start)
{
   jjCheckNAdd(jjnextStates[start]);
   jjCheckNAdd(jjnextStates[start + 1]);
}
static final long[] jjbitVec0 = {
   0x0L, 0x0L, 0xffffffffffffffffL, 0xffffffffffffffffL
};
private final int jjMoveNfa_0(int startState, int curPos)
{
   int[] nextStates;
   int startsAt = 0;
   jjnewStateCnt = 25;
   int i = 1;
   jjstateSet[0] = startState;
   int j, kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         MatchLoop: do
         {
            switch(jjstateSet[--i])
            {
               case 5:
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 91)
                        kind = 91;
                     jjCheckNAdd(10);
                  }
                  else if (curChar == 39)
                     jjCheckNAddStates(0, 3);
                  else if (curChar == 34)
                     jjCheckNAddTwoStates(14, 15);
                  else if (curChar == 45)
                     jjCheckNAdd(12);
                  if (curChar == 45)
                     jjstateSet[jjnewStateCnt++] = 0;
                  break;
               case 0:
                  if (curChar == 45)
                     jjCheckNAddStates(4, 6);
                  break;
               case 1:
                  if ((0xffffffffffffdbffL & l) != 0L)
                     jjCheckNAddStates(4, 6);
                  break;
               case 2:
                  if ((0x2400L & l) != 0L && kind > 5)
                     kind = 5;
                  break;
               case 3:
                  if (curChar == 10 && kind > 5)
                     kind = 5;
                  break;
               case 4:
                  if (curChar == 13)
                     jjstateSet[jjnewStateCnt++] = 3;
                  break;
               case 7:
                  if ((0x3ff200000000000L & l) == 0L)
                     break;
                  if (kind > 87)
                     kind = 87;
                  jjstateSet[jjnewStateCnt++] = 7;
                  break;
               case 9:
                  if ((0x3ff200000000000L & l) == 0L)
                     break;
                  if (kind > 88)
                     kind = 88;
                  jjstateSet[jjnewStateCnt++] = 9;
                  break;
               case 10:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 91)
                     kind = 91;
                  jjCheckNAdd(10);
                  break;
               case 11:
                  if (curChar == 45)
                     jjCheckNAdd(12);
                  break;
               case 12:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 92)
                     kind = 92;
                  jjCheckNAdd(12);
                  break;
               case 13:
                  if (curChar == 34)
                     jjCheckNAddTwoStates(14, 15);
                  break;
               case 14:
                  if ((0xfffffffbffffffffL & l) != 0L)
                     jjCheckNAddTwoStates(14, 15);
                  break;
               case 15:
                  if (curChar == 34 && kind > 95)
                     kind = 95;
                  break;
               case 16:
                  if (curChar == 39)
                     jjCheckNAddStates(0, 3);
                  break;
               case 17:
                  if ((0x3000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(17, 18);
                  break;
               case 18:
                  if (curChar == 39)
                     jjAddStates(7, 8);
                  break;
               case 21:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(21, 22);
                  break;
               case 22:
                  if (curChar == 39)
                     jjAddStates(9, 10);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         MatchLoop: do
         {
            switch(jjstateSet[--i])
            {
               case 5:
                  if ((0x7fffffeL & l) != 0L)
                  {
                     if (kind > 88)
                        kind = 88;
                     jjCheckNAdd(9);
                  }
                  else if ((0x7fffffe00000000L & l) != 0L)
                  {
                     if (kind > 87)
                        kind = 87;
                     jjCheckNAdd(7);
                  }
                  break;
               case 1:
                  jjAddStates(4, 6);
                  break;
               case 6:
                  if ((0x7fffffe00000000L & l) == 0L)
                     break;
                  if (kind > 87)
                     kind = 87;
                  jjCheckNAdd(7);
                  break;
               case 7:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 87)
                     kind = 87;
                  jjCheckNAdd(7);
                  break;
               case 8:
                  if ((0x7fffffeL & l) == 0L)
                     break;
                  if (kind > 88)
                     kind = 88;
                  jjCheckNAdd(9);
                  break;
               case 9:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 88)
                     kind = 88;
                  jjCheckNAdd(9);
                  break;
               case 14:
                  jjAddStates(11, 12);
                  break;
               case 19:
                  if (curChar == 66 && kind > 93)
                     kind = 93;
                  break;
               case 20:
                  if (curChar == 98 && kind > 93)
                     kind = 93;
                  break;
               case 21:
                  if ((0x7e0000007eL & l) != 0L)
                     jjAddStates(13, 14);
                  break;
               case 23:
                  if (curChar == 72 && kind > 94)
                     kind = 94;
                  break;
               case 24:
                  if (curChar == 104 && kind > 94)
                     kind = 94;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         MatchLoop: do
         {
            switch(jjstateSet[--i])
            {
               case 1:
                  if ((jjbitVec0[i2] & l2) != 0L)
                     jjAddStates(4, 6);
                  break;
               case 14:
                  if ((jjbitVec0[i2] & l2) != 0L)
                     jjAddStates(11, 12);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 25 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
static final int[] jjnextStates = {
   17, 21, 22, 18, 1, 2, 4, 19, 20, 23, 24, 14, 15, 21, 22, 
};
public static final String[] jjstrLiteralImages = {
"", null, null, null, null, null, "\101\103\103\105\123\123", 
"\141\143\143\145\163\163\151\142\154\145\55\146\157\162\55\156\157\164\151\146\171", "\101\107\105\116\124\55\103\101\120\101\102\111\114\111\124\111\105\123", 
"\101\120\120\114\111\103\101\124\111\117\116", "\72\72\75", "\101\125\107\115\105\116\124\123", "\102\105\107\111\116", 
"\102\111\124", "\102\111\124\123", "\103\110\117\111\103\105", 
"\103\117\116\124\101\103\124\55\111\116\106\117", "\143\165\162\162\145\156\164", 
"\104\105\106\111\116\111\124\111\117\116\123", "\104\105\106\126\101\114", "\144\145\160\162\145\143\141\164\145\144", 
"\104\105\123\103\122\111\120\124\111\117\116", "\104\111\123\120\114\101\131\55\110\111\116\124", "\145\155\160\164\171", 
"\105\116\104", "\105\116\124\105\122\120\122\111\123\105", 
"\105\130\120\114\111\103\111\124", "\105\130\120\117\122\124\123", "\106\101\114\123\105", "\106\122\117\115", 
"\107\122\117\125\120", "\111\104\105\116\124\111\106\111\105\122", 
"\151\144\145\156\164\151\146\151\145\162", "\111\115\120\114\111\103\111\124", "\111\115\120\114\111\105\104", 
"\111\115\120\117\122\124\123", "\111\116\104\105\130", "\111\116\124\105\107\105\122", 
"\114\101\123\124\55\125\120\104\101\124\105\104", "\115\101\103\122\117", 
"\115\101\116\104\101\124\117\122\131\55\107\122\117\125\120\123", "\155\141\156\144\141\164\157\162\171", 
"\115\101\130\55\101\103\103\105\123\123", "\115\111\116\55\101\103\103\105\123\123", "\115\117\104\125\114\105", 
"\115\117\104\125\114\105\55\103\117\115\120\114\111\101\116\103\105", "\115\117\104\125\114\105\55\111\104\105\116\124\111\124\131", 
"\156\157\164\55\141\143\143\145\163\163\151\142\154\145", "\116\117\124\101\124\111\117\116", 
"\116\117\124\111\106\111\103\101\124\111\117\116\123", "\116\117\124\111\106\111\103\101\124\111\117\116\55\107\122\117\125\120", 
"\116\117\124\111\106\111\103\101\124\111\117\116\55\124\131\120\105", "\116\125\114\114", "\156\165\155\142\145\162", "\117\102\112\105\103\124", 
"\117\102\112\105\103\124\123", "\117\102\112\105\103\124\55\111\104\105\116\124\111\124\131", 
"\117\102\112\105\103\124\55\107\122\117\125\120", "\117\102\112\105\103\124\55\124\131\120\105", 
"\157\142\163\157\154\145\164\145", "\117\103\124\105\124", "\117\106", "\157\160\164\151\157\156\141\154", 
"\117\122\107\101\116\111\132\101\124\111\117\116", "\122\105\106\105\122\105\116\103\105", "\122\105\126\111\123\111\117\116", 
"\162\145\141\144\55\143\162\145\141\164\145", "\162\145\141\144\55\157\156\154\171", 
"\162\145\141\144\55\167\162\151\164\145", "\123\105\121\125\105\116\103\105", "\123\111\132\105", 
"\123\124\101\124\125\123", "\163\164\162\151\156\147", "\123\124\122\111\116\107", 
"\123\131\116\124\101\130", "\124\105\130\124\125\101\114\55\103\117\116\126\105\116\124\111\117\116", 
"\124\122\101\120\55\124\131\120\105", "\124\122\125\105", "\124\131\120\105", "\164\171\160\145", 
"\125\116\111\124\123", "\125\116\111\126\105\122\123\101\114", "\166\141\154\165\145", 
"\126\101\114\125\105", "\126\101\122\111\101\102\114\105\123", 
"\167\162\151\164\145\55\157\156\154\171", "\127\122\111\124\105\55\123\131\116\124\101\130", null, null, null, null, 
null, null, null, null, null, "\73", "\54", "\56\56", "\133", "\135", "\50", "\174", 
"\51", "\173", "\175", "\56", "\74", "\76", };
public static final String[] lexStateNames = {
   "DEFAULT", 
};
static final long[] jjtoToken = {
   0xffffffffffffffc1L, 0x1ffff9ffffffL, 
};
static final long[] jjtoSkip = {
   0x3eL, 0x0L, 
};
protected SimpleCharStream input_stream;
private final int[] jjrounds = new int[25];
private final int[] jjstateSet = new int[50];
protected char curChar;
public ParserTokenManager(SimpleCharStream stream)
{
   if (SimpleCharStream.staticFlag)
      throw new Error("ERROR: Cannot use a static CharStream class with a non-static lexical analyzer.");
   input_stream = stream;
}
public ParserTokenManager(SimpleCharStream stream, int lexState)
{
   this(stream);
   SwitchTo(lexState);
}
public void ReInit(SimpleCharStream stream)
{
   jjmatchedPos = jjnewStateCnt = 0;
   curLexState = defaultLexState;
   input_stream = stream;
   ReInitRounds();
}
private final void ReInitRounds()
{
   int i;
   jjround = 0x80000001;
   for (i = 25; i-- > 0;)
      jjrounds[i] = 0x80000000;
}
public void ReInit(SimpleCharStream stream, int lexState)
{
   ReInit(stream);
   SwitchTo(lexState);
}
public void SwitchTo(int lexState)
{
   if (lexState >= 1 || lexState < 0)
      throw new TokenMgrError("Error: Ignoring invalid lexical state : " + lexState + ". State unchanged.", TokenMgrError.INVALID_LEXICAL_STATE);
   else
      curLexState = lexState;
}

protected Token jjFillToken()
{
   Token t = Token.newToken(jjmatchedKind);
   t.kind = jjmatchedKind;
   String im = jjstrLiteralImages[jjmatchedKind];
   t.image = (im == null) ? input_stream.GetImage() : im;
   t.beginLine = input_stream.getBeginLine();
   t.beginColumn = input_stream.getBeginColumn();
   t.endLine = input_stream.getEndLine();
   t.endColumn = input_stream.getEndColumn();
   return t;
}

int curLexState = 0;
int defaultLexState = 0;
int jjnewStateCnt;
int jjround;
int jjmatchedPos;
int jjmatchedKind;

public Token getNextToken() 
{
  int kind;
  Token specialToken = null;
  Token matchedToken;
  int curPos = 0;

  EOFLoop :
  for (;;)
  {   
   try   
   {     
      curChar = input_stream.BeginToken();
   }     
   catch(java.io.IOException e)
   {        
      jjmatchedKind = 0;
      matchedToken = jjFillToken();
      return matchedToken;
   }

   try { input_stream.backup(0);
      while (curChar <= 32 && (0x100002600L & (1L << curChar)) != 0L)
         curChar = input_stream.BeginToken();
   }
   catch (java.io.IOException e1) { continue EOFLoop; }
   jjmatchedKind = 0x7fffffff;
   jjmatchedPos = 0;
   curPos = jjMoveStringLiteralDfa0_0();
   if (jjmatchedKind != 0x7fffffff)
   {
      if (jjmatchedPos + 1 < curPos)
         input_stream.backup(curPos - jjmatchedPos - 1);
      if ((jjtoToken[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L)
      {
         matchedToken = jjFillToken();
         return matchedToken;
      }
      else
      {
         continue EOFLoop;
      }
   }
   int error_line = input_stream.getEndLine();
   int error_column = input_stream.getEndColumn();
   String error_after = null;
   boolean EOFSeen = false;
   try { input_stream.readChar(); input_stream.backup(1); }
   catch (java.io.IOException e1) {
      EOFSeen = true;
      error_after = curPos <= 1 ? "" : input_stream.GetImage();
      if (curChar == '\n' || curChar == '\r') {
         error_line++;
         error_column = 0;
      }
      else
         error_column++;
   }
   if (!EOFSeen) {
      input_stream.backup(1);
      error_after = curPos <= 1 ? "" : input_stream.GetImage();
   }
   throw new TokenMgrError(EOFSeen, curLexState, error_line, error_column, error_after, curChar, TokenMgrError.LEXICAL_ERROR);
  }
}

}
