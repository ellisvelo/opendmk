/*
 * @(#)file      ASTDefinedValue.java
 * @(#)author    Sun Microsystems, Inc.
 * @(#)version   4.12
 * @(#)date      07/10/01
 *
 * 
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS HEADER.
 * 
 * Copyright (c) 2007 Sun Microsystems, Inc. All Rights Reserved.
 * 
 * The contents of this file are subject to the terms of either the GNU General
 * Public License Version 2 only ("GPL") or the Common Development and
 * Distribution License("CDDL")(collectively, the "License"). You may not use
 * this file except in compliance with the License. You can obtain a copy of the
 * License at http://opendmk.dev.java.net/legal_notices/licenses.txt or in the 
 * LEGAL_NOTICES folder that accompanied this code. See the License for the 
 * specific language governing permissions and limitations under the License.
 * 
 * When distributing the software, include this License Header Notice in each
 * file and include the License file found at
 *     http://opendmk.dev.java.net/legal_notices/licenses.txt
 * or in the LEGAL_NOTICES folder that accompanied this code.
 * Sun designates this particular file as subject to the "Classpath" exception
 * as provided by Sun in the GPL Version 2 section of the License file that
 * accompanied this code.
 * 
 * If applicable, add the following below the License Header, with the fields
 * enclosed by brackets [] replaced by your own identifying information:
 * 
 *       "Portions Copyrighted [year] [name of copyright owner]"
 * 
 * Contributor(s):
 * 
 * If you wish your version of this file to be governed by only the CDDL or
 * only the GPL Version 2, indicate your decision by adding
 * 
 *       "[Contributor] elects to include this software in this distribution
 *        under the [CDDL or GPL Version 2] license."
 * 
 * If you don't indicate a single choice of license, a recipient has the option
 * to distribute your version of this file under either the CDDL or the GPL
 * Version 2, or to extend the choice of license to its licensees as provided
 * above. However, if you add GPL Version 2 code and therefore, elected the
 * GPL Version 2 license, then the option applies only if the new code is made
 * subject to such option by the copyright holder.
 * 
 *
 */


/* Generated By:JJTree: Do not edit this line. ASTDefinedValue.java */

package com.sun.jdmk.tools.mibgen;

import java.util.*;

public class ASTDefinedValue extends SimpleNode {
  protected String symbolName=null;
  protected String moduleName= null;
  ASTDefinedValue(int id) {
    super(id);
  }

  ASTDefinedValue(Parser p, int id) {
    super(p, id);
  }

  public static Node jjtCreate(int id) {
      return new ASTDefinedValue(id);
  }

  public static Node jjtCreate(Parser p, int id) {
      return new ASTDefinedValue(p, id);
  }
  
  public void resolve(IdentifierHandler handler, String key) {
    handler.addResolution(key, this);
    
    // Access the identifier ...
    //
    SimpleNode identifier= getChildOfType(ParserTreeConstants.JJTIDENTIFIER);
    if (identifier == null)
      return;
    handler.resolveIdentifier((ASTIdentifier) identifier);
  }
  
  public StringBuffer computeValue(Vector referenceList) throws SemanticException {
     StringBuffer result= new StringBuffer();
     if (children == null)
       return result;
     return ((SimpleNode) children[0]).computeValue(referenceList);
   }

    public String getDefValInitializer(String strMbeanSyntax, ASTNamedType syntax, String varName) {
                                
        String result = new String();
        
        int intSnmpSyntax = SyntaxMapper.getIntSnmpSyntax(syntax.getSnmpSyntax());
        
        switch(intSnmpSyntax) {
        case SyntaxMapper.INTEGER32:    // Enumerations (Truth values, INTEGER)
            // Check that the defined value contains a parsable integer.
            //
            if (syntax.isEnumeratedType()) {
                if (!syntax.getEnumeratedDef().getEnum().containsKey(symbolName)) {
                    Trace.warning(MessageHandler.getMessage("compile.w.defval", symbolName, varName));
                    break;
                }
            }
            else {
                try {
                    Integer i = new Integer(symbolName);
                } catch(NumberFormatException e) {
                    Trace.warning(MessageHandler.getMessage("compile.w.defval", symbolName, varName));
                    break;
                }
            }
            result = " = new " + strMbeanSyntax.trim() + "(\"" + symbolName + "\")";
            break;
        case SyntaxMapper.STRING:
            result = " = new " + strMbeanSyntax.trim() + "(\"" + symbolName + "\")";
            break;
        case SyntaxMapper.OBJECT_ID:
            ASTMib localMib = getMib();
            // This method called on the MIB owner of this ASTDefinedValue
            // translate the symbole name into a dot notation string.
            String oid = localMib.translateOid(symbolName);
            if (oid != null)
                result = " = new " + strMbeanSyntax.trim() + "(\"" + oid + "\")";
            else
                Trace.warning(MessageHandler.getMessage("compile.w.defval", symbolName, varName));
            break;
        case SyntaxMapper.BYTE:
            result = String.valueOf(symbolName);
            result = " = {" + CharToByte(result) + "}";
            break;
        default:
            Trace.warning(MessageHandler.getMessage("compile.w.defval", symbolName, varName));
            break;
        }
        
        return result;
    }
            
    String CharToByte(String ch) {
        StringBuffer result = new StringBuffer();
        byte[] value = ch.getBytes();
        int nbBytes = value.length;
        for (int i = 0; i < nbBytes; i++) {
            result.append(" new Byte(\"");
            result.append(value[i]);
            result.append("\")");
            if (i < nbBytes-1)
                result.append(",");
        }
        return new String(result); 
    }
}
