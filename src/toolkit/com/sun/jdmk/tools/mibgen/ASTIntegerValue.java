/*
 * @(#)file      ASTIntegerValue.java
 * @(#)author    Sun Microsystems, Inc.
 * @(#)version   4.14
 * @(#)date      07/10/01
 *
 * 
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS HEADER.
 * 
 * Copyright (c) 2007 Sun Microsystems, Inc. All Rights Reserved.
 * 
 * The contents of this file are subject to the terms of either the GNU General
 * Public License Version 2 only ("GPL") or the Common Development and
 * Distribution License("CDDL")(collectively, the "License"). You may not use
 * this file except in compliance with the License. You can obtain a copy of the
 * License at http://opendmk.dev.java.net/legal_notices/licenses.txt or in the 
 * LEGAL_NOTICES folder that accompanied this code. See the License for the 
 * specific language governing permissions and limitations under the License.
 * 
 * When distributing the software, include this License Header Notice in each
 * file and include the License file found at
 *     http://opendmk.dev.java.net/legal_notices/licenses.txt
 * or in the LEGAL_NOTICES folder that accompanied this code.
 * Sun designates this particular file as subject to the "Classpath" exception
 * as provided by Sun in the GPL Version 2 section of the License file that
 * accompanied this code.
 * 
 * If applicable, add the following below the License Header, with the fields
 * enclosed by brackets [] replaced by your own identifying information:
 * 
 *       "Portions Copyrighted [year] [name of copyright owner]"
 * 
 * Contributor(s):
 * 
 * If you wish your version of this file to be governed by only the CDDL or
 * only the GPL Version 2, indicate your decision by adding
 * 
 *       "[Contributor] elects to include this software in this distribution
 *        under the [CDDL or GPL Version 2] license."
 * 
 * If you don't indicate a single choice of license, a recipient has the option
 * to distribute your version of this file under either the CDDL or the GPL
 * Version 2, or to extend the choice of license to its licensees as provided
 * above. However, if you add GPL Version 2 code and therefore, elected the
 * GPL Version 2 license, then the option applies only if the new code is made
 * subject to such option by the copyright holder.
 * 
 *
 */


/* Generated By:JJTree: Do not edit this line. ASTIntegerValue.java */

package com.sun.jdmk.tools.mibgen;

import java.util.*;

public class ASTIntegerValue extends SimpleNode {
  // "valStr" is the real default value defined in the MIB file.
  protected String valStr;
  // "val" is the default value after parsing to long value.
  // If the parsing has failed (NumberFormatException), this value equals 0.
  protected long val;

  ASTIntegerValue(int id) {
    super(id);
  }

  ASTIntegerValue(Parser p, int id) {
    super(p, id);
  }

  public static Node jjtCreate(int id) {
      return new ASTIntegerValue(id);
  }

  public static Node jjtCreate(Parser p, int id) {
      return new ASTIntegerValue(p, id);
  }
  
  public void  resolve(IdentifierHandler handler, String key) {
    handler.addResolution(key, this);
  }
  
  public long getValue() {
    return val;
  }
  
   public StringBuffer computeValue(Vector referenceList) throws SemanticException {
    StringBuffer result= new StringBuffer();
    result.append(String.valueOf(val));
    return result;
   }

    public String getDefValInitializer(String strMbeanSyntax, ASTNamedType syntax, String varName) {
                        
        String result = new String();
        
        int intSnmpSyntax = SyntaxMapper.getIntSnmpSyntax(syntax.getSnmpSyntax());
        
        switch(intSnmpSyntax) {
        case SyntaxMapper.INTEGER32:
            // Enumerated type.
            //
            if (syntax.isEnumeratedType()) {
                if (!syntax.getEnumeratedDef().getEnum().contains(valStr)) {
                    Trace.warning(MessageHandler.getMessage("compile.w.defval", valStr, varName));
                    break;
                }
            }
            // No error when parsing to long value.
            //
            if (valStr.equals(String.valueOf(val)))
                result = " = new " + strMbeanSyntax.trim() + "(" + valStr + ")";
            else
                Trace.warning(MessageHandler.getMessage("compile.w.defval", valStr, varName));
            break;
        case SyntaxMapper.INTEGER64:
            // No error when parsing to long value.
            //
            if (valStr.equals(String.valueOf(val)))
                result = " = new " + strMbeanSyntax.trim() + "(" + valStr + "L)";
            else
                Trace.warning(MessageHandler.getMessage("compile.w.defval", valStr, varName));
            break;
        case SyntaxMapper.COUNTER32:
        case SyntaxMapper.COUNTER64:
        case SyntaxMapper.TIME_TICKS:
        case SyntaxMapper.GAUGE:
            // No error when parsing to long value.
            // Counter32, Counter64, TimeTicks and Gauge must be positive.
            //
            if (valStr.equals(String.valueOf(val)) && val >= 0 )
                result = " = new " + strMbeanSyntax.trim() + "(" + valStr + "L)";
            else
                Trace.warning(MessageHandler.getMessage("compile.w.defval", valStr, varName));
            break;
        case SyntaxMapper.IP_ADDRESS:
            if (val == 0) {
                result = " = new String(\"0.0.0.0\")";
            }
            break;
        default:
            Trace.warning(MessageHandler.getMessage("compile.w.defval", valStr, varName));
            break;
        }
        
        return result;
    }
}
