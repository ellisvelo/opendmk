/*
 * @(#)SNMP_USER_BASED_SM_MIB.java	1.16
 *
 * 
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS HEADER.
 * 
 * Copyright (c) 2007 Sun Microsystems, Inc. All Rights Reserved.
 * 
 * The contents of this file are subject to the terms of either the GNU General
 * Public License Version 2 only ("GPL") or the Common Development and
 * Distribution License("CDDL")(collectively, the "License"). You may not use
 * this file except in compliance with the License. You can obtain a copy of the
 * License at http://opendmk.dev.java.net/legal_notices/licenses.txt or in the 
 * LEGAL_NOTICES folder that accompanied this code. See the License for the 
 * specific language governing permissions and limitations under the License.
 * 
 * When distributing the software, include this License Header Notice in each
 * file and include the License file found at
 *     http://opendmk.dev.java.net/legal_notices/licenses.txt
 * or in the LEGAL_NOTICES folder that accompanied this code.
 * Sun designates this particular file as subject to the "Classpath" exception
 * as provided by Sun in the GPL Version 2 section of the License file that
 * accompanied this code.
 * 
 * If applicable, add the following below the License Header, with the fields
 * enclosed by brackets [] replaced by your own identifying information:
 * 
 *       "Portions Copyrighted [year] [name of copyright owner]"
 * 
 * Contributor(s):
 * 
 * If you wish your version of this file to be governed by only the CDDL or
 * only the GPL Version 2, indicate your decision by adding
 * 
 *       "[Contributor] elects to include this software in this distribution
 *        under the [CDDL or GPL Version 2] license."
 * 
 * If you don't indicate a single choice of license, a recipient has the option
 * to distribute your version of this file under either the CDDL or the GPL
 * Version 2, or to extend the choice of license to its licensees as provided
 * above. However, if you add GPL Version 2 code and therefore, elected the
 * GPL Version 2 license, then the option applies only if the new code is made
 * subject to such option by the copyright holder.
 * 
 *
 */
package com.sun.management.snmp.usm.usmmib;

//
// Generated by mibgen version 5.0 (09/06/01) when compiling SNMP-USER-BASED-SM-MIB in standard metadata mode.
//

// java imports
//
import java.io.Serializable;
import java.util.Hashtable;

// jmx imports
//
import javax.management.MBeanServer;
import javax.management.ObjectName;
import javax.management.InstanceAlreadyExistsException;

// jdmk imports
//
import com.sun.management.snmp.agent.SnmpMib;
import com.sun.management.snmp.agent.SnmpMibNode;
import com.sun.management.snmp.agent.SnmpMibTable;
import com.sun.management.snmp.agent.SnmpStandardObjectServer;

/**
 * The class is used for representing "SNMP-USER-BASED-SM-MIB".
 * You can edit the file if you want to modify the behavior of the MIB.
 *
 *
 * @since Java DMK 5.1
 */
public class SNMP_USER_BASED_SM_MIB extends SnmpMib implements Serializable {
    private static final long serialVersionUID = 8904626973994697L;

    /**
     * Default constructor. Initialize the Mib tree.
     */
    public SNMP_USER_BASED_SM_MIB() {
        mibName = "SNMP_USER_BASED_SM_MIB";
    }

    /**
     * Initialization of the MIB with no registration in Java DMK.
     */
    public void init() throws IllegalAccessException {
        // Allow only one initialization of the MIB.
        //
        if (isInitialized == true) {
            return ;
        }

        try  {
            populate(null, null);
        } catch(IllegalAccessException x)  {
            throw x;
        } catch(RuntimeException x)  {
            throw x;
        } catch(Exception x)  {
            throw new Error(x.toString());
        }

        isInitialized = true;
    }

    /**
     * Initialization of the MIB with AUTOMATIC REGISTRATION in Java DMK.
     */
    public ObjectName preRegister(MBeanServer server, ObjectName name)
            throws Exception {
        // Allow only one initialization of the MIB.
        //
        if (isInitialized == true) {
            throw new InstanceAlreadyExistsException();
        }

        // Initialize MBeanServer information.
        //
        this.server = server;

        populate(server, name);

        isInitialized = true;
        return name;
    }

    /**
     * Initialization of the MIB with no registration in Java DMK.
     */
    public void populate(MBeanServer server, ObjectName name) 
        throws Exception {
        // Allow only one initialization of the MIB.
        //
        if (isInitialized == true) {
            return ;
        }

        if (objectserver == null) 
            objectserver = new SnmpStandardObjectServer();

        // Initialization of the "UsmUser" group.
        // To disable support of this group, redefine the 
        // "createUsmUserMetaNode()" factory method, and make it return "null"
        //
        initUsmUser(server);

        // Initialization of the "UsmStats" group.
        // To disable support of this group, redefine the 
        // "createUsmStatsMetaNode()" factory method, and make it return "null"
        //
        initUsmStats(server);

        isInitialized = true;
    }


    // ------------------------------------------------------------
    // 
    // Initialization of the "UsmUser" group.
    // 
    // ------------------------------------------------------------


    /**
     * Initialization of the "UsmUser" group.
     * 
     * To disable support of this group, redefine the 
     * "createUsmUserMetaNode()" factory method, and make it return "null"
     * 
     * @param server    MBeanServer for this group (may be null)
     * 
     **/
    protected void initUsmUser(MBeanServer server) 
        throws Exception {
        final String oid = getGroupOid("UsmUser", "1.3.6.1.6.3.15.1.2");
        ObjectName objname = null;
        if (server != null) {
            objname = getGroupObjectName("UsmUser", oid, mibName + ":name=com.sun.management.snmp.usm.usmmib.UsmUser");
        }
        final UsmUserMeta meta = createUsmUserMetaNode("UsmUser", oid, objname, server);
        if (meta != null) {
            meta.registerTableNodes( this, server );

            // Note that when using standard metadata,
            // the returned object must implement the "UsmUserMBean"
            // interface.
            //
            final UsmUserMBean group = (UsmUserMBean) createUsmUserMBean("UsmUser", oid, objname, server);
            meta.setInstance( group );
            registerGroupNode("UsmUser", oid, objname, meta, group, server);
        }
    }


    /**
     * Factory method for "UsmUser" group metadata class.
     * 
     * You can redefine this method if you need to replace the default
     * generated metadata class with your own customized class.
     * 
     * @param groupName Name of the group ("UsmUser")
     * @param groupOid  OID of this group
     * @param groupObjname ObjectName for this group (may be null)
     * @param server    MBeanServer for this group (may be null)
     * 
     * @return An instance of the metadata class generated for the
     *         "UsmUser" group (UsmUserMeta)
     * 
     **/
    protected UsmUserMeta createUsmUserMetaNode(String groupName,
                String groupOid, ObjectName groupObjname, MBeanServer server)  {
        return new UsmUserMeta(this, objectserver);
    }


    /**
     * Factory method for "UsmUser" group MBean.
     * 
     * You can redefine this method if you need to replace the default
     * generated MBean class with your own customized class.
     * 
     * @param groupName Name of the group ("UsmUser")
     * @param groupOid  OID of this group
     * @param groupObjname ObjectName for this group (may be null)
     * @param server    MBeanServer for this group (may be null)
     * 
     * @return An instance of the MBean class generated for the
     *         "UsmUser" group (UsmUser)
     * 
     * Note that when using standard metadata,
     * the returned object must implement the "UsmUserMBean"
     * interface.
     **/
    protected Object createUsmUserMBean(String groupName,
                String groupOid,  ObjectName groupObjname, MBeanServer server)  {

        // Note that when using standard metadata,
        // the returned object must implement the "UsmUserMBean"
        // interface.
        //
        if (server != null) 
            return new UsmUser(this,server);
        else 
            return new UsmUser(this);
    }


    // ------------------------------------------------------------
    // 
    // Initialization of the "UsmStats" group.
    // 
    // ------------------------------------------------------------


    /**
     * Initialization of the "UsmStats" group.
     * 
     * To disable support of this group, redefine the 
     * "createUsmStatsMetaNode()" factory method, and make it return "null"
     * 
     * @param server    MBeanServer for this group (may be null)
     * 
     **/
    protected void initUsmStats(MBeanServer server) 
        throws Exception {
        final String oid = getGroupOid("UsmStats", "1.3.6.1.6.3.15.1.1");
        ObjectName objname = null;
        if (server != null) {
            objname = getGroupObjectName("UsmStats", oid, mibName + ":name=com.sun.management.snmp.usm.usmmib.UsmStats");
        }
        final UsmStatsMeta meta = createUsmStatsMetaNode("UsmStats", oid, objname, server);
        if (meta != null) {
            meta.registerTableNodes( this, server );

            // Note that when using standard metadata,
            // the returned object must implement the "UsmStatsMBean"
            // interface.
            //
            final UsmStatsMBean group = (UsmStatsMBean) createUsmStatsMBean("UsmStats", oid, objname, server);
            meta.setInstance( group );
            registerGroupNode("UsmStats", oid, objname, meta, group, server);
        }
    }


    /**
     * Factory method for "UsmStats" group metadata class.
     * 
     * You can redefine this method if you need to replace the default
     * generated metadata class with your own customized class.
     * 
     * @param groupName Name of the group ("UsmStats")
     * @param groupOid  OID of this group
     * @param groupObjname ObjectName for this group (may be null)
     * @param server    MBeanServer for this group (may be null)
     * 
     * @return An instance of the metadata class generated for the
     *         "UsmStats" group (UsmStatsMeta)
     * 
     **/
    protected UsmStatsMeta createUsmStatsMetaNode(String groupName,
                String groupOid, ObjectName groupObjname, MBeanServer server)  {
        return new UsmStatsMeta(this, objectserver);
    }


    /**
     * Factory method for "UsmStats" group MBean.
     * 
     * You can redefine this method if you need to replace the default
     * generated MBean class with your own customized class.
     * 
     * @param groupName Name of the group ("UsmStats")
     * @param groupOid  OID of this group
     * @param groupObjname ObjectName for this group (may be null)
     * @param server    MBeanServer for this group (may be null)
     * 
     * @return An instance of the MBean class generated for the
     *         "UsmStats" group (UsmStats)
     * 
     * Note that when using standard metadata,
     * the returned object must implement the "UsmStatsMBean"
     * interface.
     **/
    protected Object createUsmStatsMBean(String groupName,
                String groupOid,  ObjectName groupObjname, MBeanServer server)  {

        // Note that when using standard metadata,
        // the returned object must implement the "UsmStatsMBean"
        // interface.
        //
        if (server != null) 
            return new UsmStats(this,server);
        else 
            return new UsmStats(this);
    }


    // ------------------------------------------------------------
    // 
    // Implements the "registerTableMeta" method defined in "SnmpMib".
    // See the "SnmpMib" Javadoc API for more details.
    // 
    // ------------------------------------------------------------

    public void registerTableMeta( String name, SnmpMibTable meta) {
        if (metadatas == null) return;
        if (name == null) return;
        metadatas.put(name,meta);
    }


    // ------------------------------------------------------------
    // 
    // Implements the "getRegisteredTableMeta" method defined in "SnmpMib".
    // See the "SnmpMib" Javadoc API for more details.
    // 
    // ------------------------------------------------------------

    public SnmpMibTable getRegisteredTableMeta( String name ) {
        if (metadatas == null) return null;
        if (name == null) return null;
        return (SnmpMibTable) metadatas.get(name);
    }

    public SnmpStandardObjectServer getStandardObjectServer() {
        if (objectserver == null) 
            objectserver = new SnmpStandardObjectServer();
        return objectserver;
    }

    private boolean isInitialized = false;

    protected SnmpStandardObjectServer objectserver;

    protected final Hashtable metadatas = new Hashtable();
}
