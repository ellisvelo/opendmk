/*
 * @(#)file      ASTObjectSubID.java
 * @(#)author    Sun Microsystems, Inc.
 * @(#)version   4.9
 * @(#)date      07/10/01
 *
 * 
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS HEADER.
 * 
 * Copyright (c) 2007 Sun Microsystems, Inc. All Rights Reserved.
 * 
 * The contents of this file are subject to the terms of either the GNU General
 * Public License Version 2 only ("GPL") or the Common Development and
 * Distribution License("CDDL")(collectively, the "License"). You may not use
 * this file except in compliance with the License. You can obtain a copy of the
 * License at http://opendmk.dev.java.net/legal_notices/licenses.txt or in the 
 * LEGAL_NOTICES folder that accompanied this code. See the License for the 
 * specific language governing permissions and limitations under the License.
 * 
 * When distributing the software, include this License Header Notice in each
 * file and include the License file found at
 *     http://opendmk.dev.java.net/legal_notices/licenses.txt
 * or in the LEGAL_NOTICES folder that accompanied this code.
 * Sun designates this particular file as subject to the "Classpath" exception
 * as provided by Sun in the GPL Version 2 section of the License file that
 * accompanied this code.
 * 
 * If applicable, add the following below the License Header, with the fields
 * enclosed by brackets [] replaced by your own identifying information:
 * 
 *       "Portions Copyrighted [year] [name of copyright owner]"
 * 
 * Contributor(s):
 * 
 * If you wish your version of this file to be governed by only the CDDL or
 * only the GPL Version 2, indicate your decision by adding
 * 
 *       "[Contributor] elects to include this software in this distribution
 *        under the [CDDL or GPL Version 2] license."
 * 
 * If you don't indicate a single choice of license, a recipient has the option
 * to distribute your version of this file under either the CDDL or the GPL
 * Version 2, or to extend the choice of license to its licensees as provided
 * above. However, if you add GPL Version 2 code and therefore, elected the
 * GPL Version 2 license, then the option applies only if the new code is made
 * subject to such option by the copyright holder.
 * 
 *
 */


/* Generated By:JJTree: Do not edit this line. ASTObjectSubID.java */

package com.sun.jdmk.tools.mibgen;

import java.util.*;

public class ASTObjectSubID extends SimpleNode {
    ASTObjectSubID(int id) {
        super(id);
    }

    ASTObjectSubID(Parser p, int id) {
        super(p, id);
    }

    public static Node jjtCreate(int id) {
        return new ASTObjectSubID(id);
    }

    public static Node jjtCreate(Parser p, int id) {
        return new ASTObjectSubID(p, id);
    }
  
    public void  resolve(IdentifierHandler symbolsHandler) {
        int nb= children.length;
    
        if (nb == 0)
            // Cool case ... I like that
            return;
    
        if (nb == 2) {
            // we have something like a(1). So yet a new symbol ...
            //
            symbolsHandler.addResolution(((ASTIdentifier)children[0]).getName(), ((SimpleNode) children[1]));
            return;
        }
        if (nb == 1) {
            if (((SimpleNode)children[0]).id == ParserTreeConstants.JJTIDENTIFIER) {
                // Register the symbol in the list of symbols to resolve
                //
                symbolsHandler.resolveIdentifier((ASTIdentifier)children[0]);
            }
        }
    }
	
    public StringBuffer computeValue(Vector referenceList) throws SemanticException {
        StringBuffer result= new StringBuffer();
        if (children== null)
            return result;
        int nb= children.length;
        if (nb == 0)
            return result;
    
        // Start by the easiest case ...
        //
        if ( nb == 1) {
            SimpleNode aNode= (SimpleNode) children[0];
            if (aNode.id == ParserTreeConstants.JJTINTEGERVALUE) {
                // return the integer ...
                //
                ASTIntegerValue value= (ASTIntegerValue)aNode;
                result.append(value.getValue());
                return result;
            }
            if (aNode.id == ParserTreeConstants.JJTIDENTIFIER) {
                ASTIdentifier identifier= (ASTIdentifier) aNode;
                // Verify that we are not in a loop !
                //
                if (referenceList.contains(identifier)) 
                    throw new SemanticException(identifier.getName());
	
                // Register the identifier ...
                //
                referenceList.addElement(identifier);
	
                // Now go for the resolution ...
                //
                return identifier.computeValue(referenceList);
            }
            return result;
        }
    
        if (nb == 2) {
            SimpleNode aNode= (SimpleNode) children[1];
            if (aNode.id == ParserTreeConstants.JJTINTEGERVALUE) {
                // return the integer ...
                //
                ASTIntegerValue value= (ASTIntegerValue)aNode;
                result.append(value.getValue());
                return result;
            }
        }
    
        // The case TypeReference() "." Identifier() is not handled ...
        //
        return result;
    }
      
    /** 
     * Retrieve the default value for the BITS type:
     * This default value is a singleton (ex: { { blue } } )
     */
    public String getDefValBITS() {
    
        if ((children == null) || (children.length == 0))
            return null;
    
        ASTIdentifier aNode= (ASTIdentifier) children[0];
        return aNode.getName();
    }
}
