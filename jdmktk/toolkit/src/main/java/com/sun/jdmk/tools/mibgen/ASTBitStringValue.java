/*
 * @(#)file      ASTBitStringValue.java
 * @(#)author    Sun Microsystems, Inc.
 * @(#)version   4.16
 * @(#)date      07/10/01
 *
 * 
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS HEADER.
 * 
 * Copyright (c) 2007 Sun Microsystems, Inc. All Rights Reserved.
 * 
 * The contents of this file are subject to the terms of either the GNU General
 * Public License Version 2 only ("GPL") or the Common Development and
 * Distribution License("CDDL")(collectively, the "License"). You may not use
 * this file except in compliance with the License. You can obtain a copy of the
 * License at http://opendmk.dev.java.net/legal_notices/licenses.txt or in the 
 * LEGAL_NOTICES folder that accompanied this code. See the License for the 
 * specific language governing permissions and limitations under the License.
 * 
 * When distributing the software, include this License Header Notice in each
 * file and include the License file found at
 *     http://opendmk.dev.java.net/legal_notices/licenses.txt
 * or in the LEGAL_NOTICES folder that accompanied this code.
 * Sun designates this particular file as subject to the "Classpath" exception
 * as provided by Sun in the GPL Version 2 section of the License file that
 * accompanied this code.
 * 
 * If applicable, add the following below the License Header, with the fields
 * enclosed by brackets [] replaced by your own identifying information:
 * 
 *       "Portions Copyrighted [year] [name of copyright owner]"
 * 
 * Contributor(s):
 * 
 * If you wish your version of this file to be governed by only the CDDL or
 * only the GPL Version 2, indicate your decision by adding
 * 
 *       "[Contributor] elects to include this software in this distribution
 *        under the [CDDL or GPL Version 2] license."
 * 
 * If you don't indicate a single choice of license, a recipient has the option
 * to distribute your version of this file under either the CDDL or the GPL
 * Version 2, or to extend the choice of license to its licensees as provided
 * above. However, if you add GPL Version 2 code and therefore, elected the
 * GPL Version 2 license, then the option applies only if the new code is made
 * subject to such option by the copyright holder.
 * 
 *
 */


/* Generated By:JJTree: Do not edit this line. ASTBitStringValue.java */

package com.sun.jdmk.tools.mibgen;

import java.util.*;

public class ASTBitStringValue extends SimpleNode {
  protected String value;
  protected int type;

  ASTBitStringValue(int id) {
    super(id);
  }

  ASTBitStringValue(Parser p, int id) {
    super(p, id);
  }

  public static Node jjtCreate(int id) {
      return new ASTBitStringValue(id);
  }

  public static Node jjtCreate(Parser p, int id) {
      return new ASTBitStringValue(p, id);
  }
    
    public String getDefValInitializer(String strMbeanSyntax, ASTNamedType syntax, String varName) {
        
        String result = "";
        int pos = 0;
        
        int intSnmpSyntax = SyntaxMapper.getIntSnmpSyntax(syntax.getSnmpSyntax());
        
        switch(type) {
           
        // Resolve the BINARY string depending on the Mbean syntax: integer, string...
        //----------------------------------------------------------------------------
        case ParserConstants.BSTRING:
            if (value.length() >= 3) {
                // A binary string should be of the form: 'xxx'b or 'xxx'B
                if ((pos = value.lastIndexOf("b")) == -1) {
                    if ((pos = value.lastIndexOf("B")) == -1) 
                        break;
                }
                switch(intSnmpSyntax) {
                case SyntaxMapper.INTEGER32:
                    result = value.substring(0, pos);
                    result = result.replace('\'', ' ').trim();
                    result = " = new Integer(" + String.valueOf((long)Integer.parseInt(result, 2)) + ")";
                    break;
                case SyntaxMapper.INTEGER64:
                case SyntaxMapper.COUNTER32:
                case SyntaxMapper.COUNTER64:
                case SyntaxMapper.TIME_TICKS:
                case SyntaxMapper.GAUGE:
                    result = value.substring(0, pos);
                    result = result.replace('\'', ' ').trim();
                    result = " = new Long(" + String.valueOf((long)Long.parseLong(result, 2)) + "L)";
                    break;
                case SyntaxMapper.STRING:
                    result = value.substring(0, pos);
                    result = result.replace('\'', ' ').trim();
                    result = " = SnmpString.BinToChar(\"" + result + "\")";
                    break;
                case SyntaxMapper.BYTE:
                    result = value.substring(0, pos);
                    result = result.replace('\'', ' ').trim();
                    result = " = {" + BinToByte(result) + "}";
                    break;
                default:
                    break;
                }
            }
            break;
           
        // Resolve the HEXA string depending on the Mbean syntax: integer, string...
        //--------------------------------------------------------------------------
        case ParserConstants.HSTRING:
            if (value.length() >= 3) {
                // An hexadecimal string should be of the form: 'xxx'h or 'xxx'H
                if ((pos = value.lastIndexOf("h")) == -1) {
                    if ((pos = value.lastIndexOf("H")) == -1) {
                        break;
                    }
                }
                switch(intSnmpSyntax) {
                case SyntaxMapper.INTEGER32:
                    result = value.substring(0, pos);
                    result = result.replace('\'', ' ').trim();
                    result = " = new Integer(" + String.valueOf((long)Integer.parseInt(result, 16)) + ")";
                    break;
                case SyntaxMapper.INTEGER64:
                case SyntaxMapper.COUNTER32:
                case SyntaxMapper.COUNTER64:
                case SyntaxMapper.TIME_TICKS:
                case SyntaxMapper.GAUGE:
                    result = value.substring(0, pos);
                    result = result.replace('\'', ' ').trim();
                    result = " = new Long(" + String.valueOf((long)Long.parseLong(result, 16)) + "L)";
                    break;
                case SyntaxMapper.STRING:
                    result = value.substring(0, pos);
                    result = result.replace('\'', ' ').trim();
                    result = " = SnmpString.HexToChar(\"" + result + "\")";
                    break;
                case SyntaxMapper.IP_ADDRESS:
                    result = value.substring(0, pos);
                    result = result.replace('\'', ' ').trim();
                    result = " = new String(\"" + HexToCharForIpAddress(result) + "\")";
                    break;
                case SyntaxMapper.BYTE:
                case SyntaxMapper.OPAQUE:
                    result = value.substring(0, pos);
                    result = result.replace('\'', ' ').trim();
                    result = " = {" + HexToByte(result) + "}";
                    break;
                default:
                    break;
                }
            }
            break;
        
        // Resolve the CHAR string depending on the Mbean syntax: integer, string...
        //--------------------------------------------------------------------------
        case ParserConstants.CSTRING:
            if (value.length() >= 2) {
                switch(intSnmpSyntax) {
                case SyntaxMapper.STRING:
                    result = " = new String(" + String.valueOf(value) + ")";
                    break;
                case SyntaxMapper.BYTE:
                    result = String.valueOf(value);
                    result = result.replace('\"', ' ').trim();
                    result = " = {" + CharToByte(result) + "}";
                    break;
                default:
                    break;
                }
            }
            break;
            
        // Default case: parsing NameBitList for BITS type default value
        //--------------------------------------------------------------
        default:
            switch(intSnmpSyntax) {
            case SyntaxMapper.BYTE:
                if (syntax.isEnumeratedBITSType()) {
                    Hashtable enumeration = syntax.getEnumeratedBITSDef().getEnum();
                    String defValBITS = calculateDefValBITS(enumeration, value);
                    if (defValBITS != null)
                        result = " = {" + defValBITS + "}";
                    else
                        Trace.warning(MessageHandler.getMessage("compile.w.defval", value, varName));
                }
                break;
            default:
                Trace.warning(MessageHandler.getMessage("compile.w.defval", value, varName));
                break;
            }
            break;
        }
        
        return result;
    }
    
    String BinToByte(String bin) {
        StringBuffer result = new StringBuffer();
        int nbBytes = bin.length()/8;
        for (int i = 0; i < nbBytes; i++) {
            result.append(" new Byte(\"");
            result.append((byte)Integer.parseInt(bin.substring(8*i, 8*i+8), 2));
            result.append("\")");
            if (i < nbBytes-1)
                result.append(",");
        }
        return new String(result); 
    }
    
    String HexToByte(String hex) {
        StringBuffer result = new StringBuffer();
        int nbBytes = hex.length()/2;
        for (int i = 0; i < nbBytes; i++) {
            result.append(" new Byte(\"");
            result.append((byte)Integer.parseInt(hex.substring(2*i, 2*i+2), 16));
            result.append("\")");
            if (i < nbBytes-1)
                result.append(",");
        }
        return new String(result); 
    }
    
    String CharToByte(String ch) {
        StringBuffer result = new StringBuffer();
        byte[] value = ch.getBytes();
        int nbBytes = value.length;
        for (int i = 0; i < nbBytes; i++) {
            result.append(" new Byte(\"");
            result.append(value[i]);
            result.append("\")");
            if (i < nbBytes-1)
                result.append(",");
        }
        return new String(result); 
    }

    String HexToCharForIpAddress(String hex) {
        StringBuffer result = new StringBuffer();
        int nbBytes = hex.length()/2;
        for (int i = 0; i < nbBytes; i++) {
            result.append((long)Integer.parseInt(hex.substring(2*i, 2*i+2), 16));
            if (i < nbBytes-1)
                result.append(".");
        }
        return new String(result); 
    }

    String calculateDefValBITS(Hashtable enumeration, String strDefVal) {
        
        StringBuffer result = new StringBuffer();
        int intDefVal = 0;
        int i = 0;
        
        // Get the max bit number (among all the enumeration values).
        //
        int maxIntDefVal = 0;
        for (Enumeration e = enumeration.elements(); e.hasMoreElements(); ) {
            maxIntDefVal = Math.max(maxIntDefVal, (new Integer((String)e.nextElement())).intValue());
        }
        
        // Get all the bit numbers to be set.
        //
        StringTokenizer stringToken = new StringTokenizer(strDefVal, ",");
        int intDefValArray[] = new int[stringToken.countTokens()];
        while (stringToken.hasMoreTokens()) {
            String token = stringToken.nextToken();
            try {
                intDefValArray[i] = new Integer((String)enumeration.get(token)).intValue();
            } catch(NumberFormatException e) {
                return null;
            }
            i++;
        }
                
        // Initialize the byte array.
        // All the byte values are set to null except the ones containing one or more default value bit numbers.
        // (those bit numbers are set in the corresponding byte).
        //
        int nbBytes = (int)(maxIntDefVal/8) + 1;
        byte b[] = new byte[nbBytes];
        for (i = 0; i < nbBytes; i++) {
            b[i] = 0x00;
        }
        for (i = 0; i < intDefValArray.length; i++) {
            intDefVal = intDefValArray[i];
            b[((int)(intDefVal/8))] = (byte)(b[((int)(intDefVal/8))] | byteTab[7-(int)(intDefVal%8)]);
        }
        
        // Initialize the default value
        //
        for (i = 0; i < nbBytes; i++) {
            result.append(" new Byte(\"");
            result.append(b[i]);
            result.append("\")");
            if (i < nbBytes-1)
                result.append(",");
        }
        return new String(result); 
    }
    
    static byte byteTab [] = {
        ((byte)0x01),
        ((byte)0x02),
        ((byte)0x04),
        ((byte)0x08),
        ((byte)0x10),
        ((byte)0x20),
        ((byte)0x40),
        ((byte)0x80) };
    
//     String BinToChar(String bin) {
//         char value[] = new char[bin.length()/8]; 
//         int binLength = value.length;
//         for (int i = 0; i < binLength; i++) 
//             value[i] = (char)Integer.parseInt(bin.substring(8*i, 8*i+8), 2); 
//         return new String(value); 
//     }

//     String HexToChar(String hex) {
//         char value[] = new char[hex.length()/2]; 
//         int hexLength = value.length;
//         for (int i = 0; i < hexLength; i++) 
//             value[i] = (char)Integer.parseInt(hex.substring(2*i, 2*i+2), 16); 
//         return new String(value); 
//     }
}
