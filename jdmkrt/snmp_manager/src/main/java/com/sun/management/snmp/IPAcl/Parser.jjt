/*
 * @(#)file      Parser.jjt
 * @(#)author    Sun Microsystems, Inc.
 * @(#)version   4.6
 * @(#)date      02/04/12
 *
 * 
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS HEADER.
 * 
 * Copyright (c) 2007 Sun Microsystems, Inc. All Rights Reserved.
 * 
 * The contents of this file are subject to the terms of either the GNU General
 * Public License Version 2 only ("GPL") or the Common Development and
 * Distribution License("CDDL")(collectively, the "License"). You may not use
 * this file except in compliance with the License. You can obtain a copy of the
 * License at http://opendmk.dev.java.net/legal_notices/licenses.txt or in the 
 * LEGAL_NOTICES folder that accompanied this code. See the License for the 
 * specific language governing permissions and limitations under the License.
 * 
 * When distributing the software, include this License Header Notice in each
 * file and include the License file found at
 *     http://opendmk.dev.java.net/legal_notices/licenses.txt
 * or in the LEGAL_NOTICES folder that accompanied this code.
 * Sun designates this particular file as subject to the "Classpath" exception
 * as provided by Sun in the GPL Version 2 section of the License file that
 * accompanied this code.
 * 
 * If applicable, add the following below the License Header, with the fields
 * enclosed by brackets [] replaced by your own identifying information:
 * 
 *       "Portions Copyrighted [year] [name of copyright owner]"
 * 
 * Contributor(s):
 * 
 * If you wish your version of this file to be governed by only the CDDL or
 * only the GPL Version 2, indicate your decision by adding
 * 
 *       "[Contributor] elects to include this software in this distribution
 *        under the [CDDL or GPL Version 2] license."
 * 
 * If you don't indicate a single choice of license, a recipient has the option
 * to distribute your version of this file under either the CDDL or the GPL
 * Version 2, or to extend the choice of license to its licensees as provided
 * above. However, if you add GPL Version 2 code and therefore, elected the
 * GPL Version 2 license, then the option applies only if the new code is made
 * subject to such option by the copyright holder.
 * 
 *
 */

options {
  MULTI=true;
  STATIC=false;
  NODE_PREFIX= "JDM";
  NODE_PACKAGE="com.sun.management.snmp.IPAcl";
}


PARSER_BEGIN(Parser)

package com.sun.management.snmp.IPAcl;

import java.io.*;

public class Parser {
}

PARSER_END(Parser)


SKIP :
{
  " "
| "\t"
| "\n"
| "\r"
| <"--" (~["\n","\r"])* ("\n"|"\r"|"\r\n")>
| <"#" (~["\n","\r"])* ("\n"|"\r"|"\r\n")>

}



/* RESERVED WORDS AND LITERALS */

TOKEN : 
{
  <ACCESS: "access">
| <ACL: "acl">
| <ASSIGN: "=">
| <COMMUNITIES: "communities">
| <ENTERPRISE: "enterprise">
| <HOSTS: "hosts">
| <LBRACE: "{">
| <MANAGERS: "managers">
| <RANGE: "-">
| <RBRACE: "}">
| <RO: "read-only">
| <RW: "read-write">
| <TRAP: "trap">
| <INFORM: "inform">
| <TRAPCOMMUNITY: "trap-community">
| <INFORMCOMMUNITY: "inform-community">
| <TRAPNUM: "trap-num">
}



TOKEN : /* LITERALS */
{
  < INTEGER_LITERAL:
        <DECIMAL_LITERAL> (["l","L"])?
      | <HEX_LITERAL> (["l","L"])?
      | <OCTAL_LITERAL> (["l","L"])?
  >
|
  < #DECIMAL_LITERAL: ["1"-"9"] (["0"-"9"])* >
|
  < #HEX_LITERAL: "0" ["x","X"] (["0"-"9","a"-"f","A"-"F"])+ >
|      
  < #OCTAL_LITERAL: "0" (["0"-"7"])* >
}

TOKEN : /* V6 LITERALS */
{ 
  < V6_ADDRESS: ((( ( (<H> ":")+ (":")?) | "::" ) (<H> ":")* (<H> | (<D> "." <D> "." <D> "." <D>))) | ("::")) | ( (<H> ":")+ ":") >
|
  <#H: (["0"-"9","a"-"f","A"-"F"])+ >
| 
  <#D: (["0"-"9"])+ >
}
 
TOKEN : /* IDENTIFIERS */
{
  < IDENTIFIER: ( (<DIGIT>|<LETTER>)+ (<SEPARATOR>|<LETTER>|<DIGIT>)* (<DIGIT>|<LETTER>)+ ) | (<DIGIT>|<LETTER>)+ >
|
  < #LETTER: ["a"-"z","A"-"Z"] >
|
  < #SEPARATOR: ["-", "_"] >
|
  < #DIGIT: ["0"-"9"] >
|
 <CSTRING: "\"" (~["\""])* "\"">
}

 

TOKEN: /* SEPARATOR */
{
  < COMMA: "," >
| < DOT: "." >
| < MARK: "!" >
| < MASK: "/">
}

// A file can contain several acl definitions
//
JDMSecurityDefs SecurityDefs()  : {}
{
  [AclBlock()]
  [TrapBlock()]
  [InformBlock()]
  <EOF>
  { return jjtThis;}
}

void AclBlock(): {}
{
"acl" "=" "{" (AclItem())+ "}"
}

void AclItem(): {}
{
"{" jjtThis.com= Communities() jjtThis.access= Access() Managers() "}"
}

JDMCommunities Communities(): {}
{
"communities" "=" Community() ( "," Community())*

{return jjtThis;}

}

void Community(): 
{
  Token t;
}
{
t=<IDENTIFIER> {jjtThis.communityString= t.image;}
}

JDMAccess Access(): {}
{
"access" "=" ( <RO> {jjtThis.access= RO;}
              |
               <RW> {jjtThis.access= RW;}
             )
{return jjtThis;}
}


void Managers() : { }
{
"managers" "=" Host() ( "," Host())*
}

void Host() : 
{
  Token t;
}
{
HostName()
|
LOOKAHEAD(<INTEGER_LITERAL> ( "." <INTEGER_LITERAL> )* "/" <INTEGER_LITERAL>)
NetMask()
|
LOOKAHEAD(<V6_ADDRESS> "/" <INTEGER_LITERAL>)
NetMaskV6()
|
LOOKAHEAD(<INTEGER_LITERAL> ".")
IpAddress()
|
IpV6Address()
|
IpMask()
}

void HostName():
{
  Token t;
}
{
  t=<IDENTIFIER> { jjtThis.name.append(t.image); }
(
"." t=<IDENTIFIER> 
  {jjtThis.name.append( "." + t.image); }
)*

}

void IpAddress():
{
Token t;
}
{

t= <INTEGER_LITERAL> 
  {jjtThis.address.append(t.image); }
(
"." t= <INTEGER_LITERAL> 
  {jjtThis.address.append( "." + t.image); }
)*

}

void IpV6Address():
{
Token t;
}
{

t= <V6_ADDRESS> 
  {jjtThis.address.append(t.image); }
}

void IpMask():
{
Token t;
}
{

t= <INTEGER_LITERAL> 
  {jjtThis.address.append(t.image); }
(
"!" t= <INTEGER_LITERAL> 
  {jjtThis.address.append( "." + t.image); }
)*
}

void NetMask():
{
Token t;
}
{

t= <INTEGER_LITERAL> 
  {jjtThis.address.append(t.image); }
(
"." t= <INTEGER_LITERAL> 
  {jjtThis.address.append( "." + t.image); }
)* "/" t= <INTEGER_LITERAL> {jjtThis.mask = t.image; }
}

void NetMaskV6():
{
Token t;
}
{

t= <V6_ADDRESS> 
  {jjtThis.address.append(t.image); }

"/" t= <INTEGER_LITERAL> {jjtThis.mask = t.image; }
}

void TrapBlock(): { }
{
"trap" "=" "{" (TrapItem())* "}"
}

void TrapItem(): { }
{
"{" jjtThis.comm= TrapCommunity() TrapInterestedHost() (Enterprise())* "}"
}

JDMTrapCommunity TrapCommunity(): 
{
  Token t;
}
{
"trap-community" "=" t=<IDENTIFIER> { jjtThis.community= t.image; return jjtThis; }
}

void TrapInterestedHost(): { }
{
"hosts" "=" HostTrap() ("," HostTrap())*
}

void HostTrap() : 
{
  Token t;
}
{
HostName()
|
IpAddress()
|
IpV6Address()
}

void Enterprise(): 
{
  Token t;
}
{
"{"
"enterprise" "="  t=<CSTRING> {jjtThis.enterprise= t.image;}

"trap-num" "=" TrapNum() ("," TrapNum())*

"}"
}

void TrapNum():
{
  Token t;
}
{
  t=<INTEGER_LITERAL> {jjtThis.low= Integer.parseInt(t.image);}
[
  "-" t=<INTEGER_LITERAL> {jjtThis.high= Integer.parseInt(t.image);}
]
}


void InformBlock(): { }
{
"inform" "=" "{" (InformItem())* "}"
}

void InformItem(): { }
{
"{" jjtThis.comm= InformCommunity() InformInterestedHost() "}"
}

JDMInformCommunity InformCommunity(): 
{
  Token t;
}
{
"inform-community" "=" t=<IDENTIFIER> { jjtThis.community= t.image; return jjtThis; }
}

void InformInterestedHost(): { }
{
"hosts" "=" HostInform() ("," HostInform())*
}

void HostInform() : 
{
  Token t;
}
{
HostName()
|
IpAddress()
|
IpV6Address()
}

