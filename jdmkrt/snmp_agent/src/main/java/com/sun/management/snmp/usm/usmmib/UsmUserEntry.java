/*
 * @(#)UsmUserEntry.java	1.12
 *
 * 
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS HEADER.
 * 
 * Copyright (c) 2007 Sun Microsystems, Inc. All Rights Reserved.
 * 
 * The contents of this file are subject to the terms of either the GNU General
 * Public License Version 2 only ("GPL") or the Common Development and
 * Distribution License("CDDL")(collectively, the "License"). You may not use
 * this file except in compliance with the License. You can obtain a copy of the
 * License at http://opendmk.dev.java.net/legal_notices/licenses.txt or in the 
 * LEGAL_NOTICES folder that accompanied this code. See the License for the 
 * specific language governing permissions and limitations under the License.
 * 
 * When distributing the software, include this License Header Notice in each
 * file and include the License file found at
 *     http://opendmk.dev.java.net/legal_notices/licenses.txt
 * or in the LEGAL_NOTICES folder that accompanied this code.
 * Sun designates this particular file as subject to the "Classpath" exception
 * as provided by Sun in the GPL Version 2 section of the License file that
 * accompanied this code.
 * 
 * If applicable, add the following below the License Header, with the fields
 * enclosed by brackets [] replaced by your own identifying information:
 * 
 *       "Portions Copyrighted [year] [name of copyright owner]"
 * 
 * Contributor(s):
 * 
 * If you wish your version of this file to be governed by only the CDDL or
 * only the GPL Version 2, indicate your decision by adding
 * 
 *       "[Contributor] elects to include this software in this distribution
 *        under the [CDDL or GPL Version 2] license."
 * 
 * If you don't indicate a single choice of license, a recipient has the option
 * to distribute your version of this file under either the CDDL or the GPL
 * Version 2, or to extend the choice of license to its licensees as provided
 * above. However, if you add GPL Version 2 code and therefore, elected the
 * GPL Version 2 license, then the option applies only if the new code is made
 * subject to such option by the copyright holder.
 * 
 *
 */
package com.sun.management.snmp.usm.usmmib;

//
// Generated by mibgen version 5.0 (09/06/01) when compiling SNMP-USER-BASED-SM-MIB.
//

// java imports
//
import java.io.Serializable;

// jmx imports
//
import com.sun.management.snmp.SnmpStatusException;

// jdmk imports
//
import com.sun.management.snmp.agent.SnmpMib;

/**
 * The class is used for implementing the "UsmUserEntry" group.
 * The group is defined with the following oid: 1.3.6.1.6.3.15.1.2.2.1.
 *
 *
 * @since Java DMK 5.1
 */
public class UsmUserEntry implements UsmUserEntryMBean, Serializable {
    private static final long serialVersionUID = 675408598394193122L;

    /**
     * Variable for storing the value of "UsmUserPrivKeyChange".
     * The variable is identified by: "1.3.6.1.6.3.15.1.2.2.1.9".
     */
    protected Byte[] UsmUserPrivKeyChange = {};

    /**
     * Variable for storing the value of "UsmUserPrivProtocol".
     * The variable is identified by: "1.3.6.1.6.3.15.1.2.2.1.8".
     */
    protected String UsmUserPrivProtocol = new String("1.3.6.1.6.3.10.1.2.1");

    /**
     * Variable for storing the value of "UsmUserOwnAuthKeyChange".
     * The variable is identified by: "1.3.6.1.6.3.15.1.2.2.1.7".
     */
    protected Byte[] UsmUserOwnAuthKeyChange = {};

    /**
     * Variable for storing the value of "UsmUserAuthKeyChange".
     * The variable is identified by: "1.3.6.1.6.3.15.1.2.2.1.6".
     */
    protected Byte[] UsmUserAuthKeyChange = {};

    /**
     * Variable for storing the value of "UsmUserAuthProtocol".
     * The variable is identified by: "1.3.6.1.6.3.15.1.2.2.1.5".
     */
    protected String UsmUserAuthProtocol = "1.3.6.1.6.3.10.1.1.1";

    /**
     * Variable for storing the value of "UsmUserCloneFrom".
     * The variable is identified by: "1.3.6.1.6.3.15.1.2.2.1.4".
     */
    protected String UsmUserCloneFrom = "1.3.6.1.4.1.42";

    /**
     * Variable for storing the value of "UsmUserStatus".
     * The variable is identified by: "1.3.6.1.6.3.15.1.2.2.1.13".
     */
    protected EnumUsmUserStatus UsmUserStatus = new EnumUsmUserStatus();

    /**
     * Variable for storing the value of "UsmUserStorageType".
     * The variable is identified by: "1.3.6.1.6.3.15.1.2.2.1.12".
     */
    protected EnumUsmUserStorageType UsmUserStorageType = new EnumUsmUserStorageType("nonVolatile");

    /**
     * Variable for storing the value of "UsmUserSecurityName".
     * The variable is identified by: "1.3.6.1.6.3.15.1.2.2.1.3".
     */
    protected String UsmUserSecurityName = "JDMK 5.0";

    /**
     * Variable for storing the value of "UsmUserName".
     * The variable is identified by: "1.3.6.1.6.3.15.1.2.2.1.2".
     */
    protected String UsmUserName = "JDMK 5.0";

    /**
     * Variable for storing the value of "UsmUserPublic".
     * The variable is identified by: "1.3.6.1.6.3.15.1.2.2.1.11".
     */
    protected Byte[] UsmUserPublic = {};

    /**
     * Variable for storing the value of "UsmUserEngineID".
     * The variable is identified by: "1.3.6.1.6.3.15.1.2.2.1.1".
     */
    protected Byte[] UsmUserEngineID = { new Byte("74"), new Byte("68"), new Byte("77"), new Byte("75")};

    /**
     * Variable for storing the value of "UsmUserOwnPrivKeyChange".
     * The variable is identified by: "1.3.6.1.6.3.15.1.2.2.1.10".
     */
    protected Byte[] UsmUserOwnPrivKeyChange = {};


    /**
     * Constructor for the "UsmUserEntry" group.
     */
    public UsmUserEntry(SnmpMib myMib) {
    }

    /**
     * Getter for the "UsmUserPrivKeyChange" variable.
     */
    public Byte[] getUsmUserPrivKeyChange() throws SnmpStatusException {
        return UsmUserPrivKeyChange;
    }

    /**
     * Setter for the "UsmUserPrivKeyChange" variable.
     */
    public void setUsmUserPrivKeyChange(Byte[] x) throws SnmpStatusException {
        UsmUserPrivKeyChange = x;
    }

    /**
     * Checker for the "UsmUserPrivKeyChange" variable.
     */
    public void checkUsmUserPrivKeyChange(Byte[] x) throws SnmpStatusException {
        //
        // Add your own checking policy.
        //
    }

    /**
     * Getter for the "UsmUserPrivProtocol" variable.
     */
    public String getUsmUserPrivProtocol() throws SnmpStatusException {
        return UsmUserPrivProtocol;
    }

    /**
     * Setter for the "UsmUserPrivProtocol" variable.
     */
    public void setUsmUserPrivProtocol(String x) throws SnmpStatusException {
        UsmUserPrivProtocol = x;
    }

    /**
     * Checker for the "UsmUserPrivProtocol" variable.
     */
    public void checkUsmUserPrivProtocol(String x) throws SnmpStatusException {
        //
        // Add your own checking policy.
        //
    }

    /**
     * Getter for the "UsmUserOwnAuthKeyChange" variable.
     */
    public Byte[] getUsmUserOwnAuthKeyChange() throws SnmpStatusException {
        return UsmUserOwnAuthKeyChange;
    }

    /**
     * Setter for the "UsmUserOwnAuthKeyChange" variable.
     */
    public void setUsmUserOwnAuthKeyChange(Byte[] x) throws SnmpStatusException {
        UsmUserOwnAuthKeyChange = x;
    }

    /**
     * Checker for the "UsmUserOwnAuthKeyChange" variable.
     */
    public void checkUsmUserOwnAuthKeyChange(Byte[] x) throws SnmpStatusException {
        //
        // Add your own checking policy.
        //
    }

    /**
     * Getter for the "UsmUserAuthKeyChange" variable.
     */
    public Byte[] getUsmUserAuthKeyChange() throws SnmpStatusException {
        return UsmUserAuthKeyChange;
    }

    /**
     * Setter for the "UsmUserAuthKeyChange" variable.
     */
    public void setUsmUserAuthKeyChange(Byte[] x) throws SnmpStatusException {
        UsmUserAuthKeyChange = x;
    }

    /**
     * Checker for the "UsmUserAuthKeyChange" variable.
     */
    public void checkUsmUserAuthKeyChange(Byte[] x) throws SnmpStatusException {
        //
        // Add your own checking policy.
        //
    }

    /**
     * Getter for the "UsmUserAuthProtocol" variable.
     */
    public String getUsmUserAuthProtocol() throws SnmpStatusException {
        return UsmUserAuthProtocol;
    }

    /**
     * Setter for the "UsmUserAuthProtocol" variable.
     */
    public void setUsmUserAuthProtocol(String x) throws SnmpStatusException {
        UsmUserAuthProtocol = x;
    }

    /**
     * Checker for the "UsmUserAuthProtocol" variable.
     */
    public void checkUsmUserAuthProtocol(String x) throws SnmpStatusException {
        //
        // Add your own checking policy.
        //
    }

    /**
     * Getter for the "UsmUserCloneFrom" variable.
     */
    public String getUsmUserCloneFrom() throws SnmpStatusException {
        return UsmUserCloneFrom;
    }

    /**
     * Setter for the "UsmUserCloneFrom" variable.
     */
    public void setUsmUserCloneFrom(String x) throws SnmpStatusException {
        UsmUserCloneFrom = x;
    }

    /**
     * Checker for the "UsmUserCloneFrom" variable.
     */
    public void checkUsmUserCloneFrom(String x) throws SnmpStatusException {
        //
        // Add your own checking policy.
        //
    }

    /**
     * Getter for the "UsmUserStatus" variable.
     */
    public EnumUsmUserStatus getUsmUserStatus() throws SnmpStatusException {
        return UsmUserStatus;
    }

    /**
     * Setter for the "UsmUserStatus" variable.
     */
    public void setUsmUserStatus(EnumUsmUserStatus x) throws SnmpStatusException {
        UsmUserStatus = x;
    }

    /**
     * Checker for the "UsmUserStatus" variable.
     */
    public void checkUsmUserStatus(EnumUsmUserStatus x) throws SnmpStatusException {
        //
        // Add your own checking policy.
        //
    }

    /**
     * Getter for the "UsmUserStorageType" variable.
     */
    public EnumUsmUserStorageType getUsmUserStorageType() throws SnmpStatusException {
        return UsmUserStorageType;
    }

    /**
     * Setter for the "UsmUserStorageType" variable.
     */
    public void setUsmUserStorageType(EnumUsmUserStorageType x) throws SnmpStatusException {
        UsmUserStorageType = x;
    }

    /**
     * Checker for the "UsmUserStorageType" variable.
     */
    public void checkUsmUserStorageType(EnumUsmUserStorageType x) throws SnmpStatusException {
        //
        // Add your own checking policy.
        //
    }

    /**
     * Getter for the "UsmUserSecurityName" variable.
     */
    public String getUsmUserSecurityName() throws SnmpStatusException {
        return UsmUserSecurityName;
    }

    /**
     * Getter for the "UsmUserName" variable.
     */
    public String getUsmUserName() throws SnmpStatusException {
        return UsmUserName;
    }

    /**
     * Getter for the "UsmUserPublic" variable.
     */
    public Byte[] getUsmUserPublic() throws SnmpStatusException {
        return UsmUserPublic;
    }

    /**
     * Setter for the "UsmUserPublic" variable.
     */
    public void setUsmUserPublic(Byte[] x) throws SnmpStatusException {
        UsmUserPublic = x;
    }

    /**
     * Checker for the "UsmUserPublic" variable.
     */
    public void checkUsmUserPublic(Byte[] x) throws SnmpStatusException {
        //
        // Add your own checking policy.
        //
    }

    /**
     * Getter for the "UsmUserEngineID" variable.
     */
    public Byte[] getUsmUserEngineID() throws SnmpStatusException {
        return UsmUserEngineID;
    }

    /**
     * Getter for the "UsmUserOwnPrivKeyChange" variable.
     */
    public Byte[] getUsmUserOwnPrivKeyChange() throws SnmpStatusException {
        return UsmUserOwnPrivKeyChange;
    }

    /**
     * Setter for the "UsmUserOwnPrivKeyChange" variable.
     */
    public void setUsmUserOwnPrivKeyChange(Byte[] x) throws SnmpStatusException {
        UsmUserOwnPrivKeyChange = x;
    }

    /**
     * Checker for the "UsmUserOwnPrivKeyChange" variable.
     */
    public void checkUsmUserOwnPrivKeyChange(Byte[] x) throws SnmpStatusException {
        //
        // Add your own checking policy.
        //
    }

}
