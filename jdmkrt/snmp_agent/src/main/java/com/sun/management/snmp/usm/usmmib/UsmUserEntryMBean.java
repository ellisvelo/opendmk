/*
 * @(#)UsmUserEntryMBean.java	1.10
 *
 * 
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS HEADER.
 * 
 * Copyright (c) 2007 Sun Microsystems, Inc. All Rights Reserved.
 * 
 * The contents of this file are subject to the terms of either the GNU General
 * Public License Version 2 only ("GPL") or the Common Development and
 * Distribution License("CDDL")(collectively, the "License"). You may not use
 * this file except in compliance with the License. You can obtain a copy of the
 * License at http://opendmk.dev.java.net/legal_notices/licenses.txt or in the 
 * LEGAL_NOTICES folder that accompanied this code. See the License for the 
 * specific language governing permissions and limitations under the License.
 * 
 * When distributing the software, include this License Header Notice in each
 * file and include the License file found at
 *     http://opendmk.dev.java.net/legal_notices/licenses.txt
 * or in the LEGAL_NOTICES folder that accompanied this code.
 * Sun designates this particular file as subject to the "Classpath" exception
 * as provided by Sun in the GPL Version 2 section of the License file that
 * accompanied this code.
 * 
 * If applicable, add the following below the License Header, with the fields
 * enclosed by brackets [] replaced by your own identifying information:
 * 
 *       "Portions Copyrighted [year] [name of copyright owner]"
 * 
 * Contributor(s):
 * 
 * If you wish your version of this file to be governed by only the CDDL or
 * only the GPL Version 2, indicate your decision by adding
 * 
 *       "[Contributor] elects to include this software in this distribution
 *        under the [CDDL or GPL Version 2] license."
 * 
 * If you don't indicate a single choice of license, a recipient has the option
 * to distribute your version of this file under either the CDDL or the GPL
 * Version 2, or to extend the choice of license to its licensees as provided
 * above. However, if you add GPL Version 2 code and therefore, elected the
 * GPL Version 2 license, then the option applies only if the new code is made
 * subject to such option by the copyright holder.
 * 
 *
 */
package com.sun.management.snmp.usm.usmmib;

//
// Generated by mibgen version 5.0 (09/06/01) when compiling SNMP-USER-BASED-SM-MIB in standard metadata mode.
//


// jmx imports
//
import com.sun.management.snmp.SnmpStatusException;

/**
 * This interface is used for representing the remote management
 * interface for the "UsmUserEntry" MBean.
 *
 * @since Java DMK 5.1
 */
public interface UsmUserEntryMBean {

    /**
     * Getter for the "UsmUserPrivKeyChange" variable.
     */
    public Byte[] getUsmUserPrivKeyChange() throws SnmpStatusException;

    /**
     * Setter for the "UsmUserPrivKeyChange" variable.
     */
    public void setUsmUserPrivKeyChange(Byte[] x) throws SnmpStatusException;

    /**
     * Checker for the "UsmUserPrivKeyChange" variable.
     */
    public void checkUsmUserPrivKeyChange(Byte[] x) throws SnmpStatusException;

    /**
     * Getter for the "UsmUserPrivProtocol" variable.
     */
    public String getUsmUserPrivProtocol() throws SnmpStatusException;

    /**
     * Setter for the "UsmUserPrivProtocol" variable.
     */
    public void setUsmUserPrivProtocol(String x) throws SnmpStatusException;

    /**
     * Checker for the "UsmUserPrivProtocol" variable.
     */
    public void checkUsmUserPrivProtocol(String x) throws SnmpStatusException;

    /**
     * Getter for the "UsmUserOwnAuthKeyChange" variable.
     */
    public Byte[] getUsmUserOwnAuthKeyChange() throws SnmpStatusException;

    /**
     * Setter for the "UsmUserOwnAuthKeyChange" variable.
     */
    public void setUsmUserOwnAuthKeyChange(Byte[] x) throws SnmpStatusException;

    /**
     * Checker for the "UsmUserOwnAuthKeyChange" variable.
     */
    public void checkUsmUserOwnAuthKeyChange(Byte[] x) throws SnmpStatusException;

    /**
     * Getter for the "UsmUserAuthKeyChange" variable.
     */
    public Byte[] getUsmUserAuthKeyChange() throws SnmpStatusException;

    /**
     * Setter for the "UsmUserAuthKeyChange" variable.
     */
    public void setUsmUserAuthKeyChange(Byte[] x) throws SnmpStatusException;

    /**
     * Checker for the "UsmUserAuthKeyChange" variable.
     */
    public void checkUsmUserAuthKeyChange(Byte[] x) throws SnmpStatusException;

    /**
     * Getter for the "UsmUserAuthProtocol" variable.
     */
    public String getUsmUserAuthProtocol() throws SnmpStatusException;

    /**
     * Setter for the "UsmUserAuthProtocol" variable.
     */
    public void setUsmUserAuthProtocol(String x) throws SnmpStatusException;

    /**
     * Checker for the "UsmUserAuthProtocol" variable.
     */
    public void checkUsmUserAuthProtocol(String x) throws SnmpStatusException;

    /**
     * Getter for the "UsmUserCloneFrom" variable.
     */
    public String getUsmUserCloneFrom() throws SnmpStatusException;

    /**
     * Setter for the "UsmUserCloneFrom" variable.
     */
    public void setUsmUserCloneFrom(String x) throws SnmpStatusException;

    /**
     * Checker for the "UsmUserCloneFrom" variable.
     */
    public void checkUsmUserCloneFrom(String x) throws SnmpStatusException;

    /**
     * Getter for the "UsmUserStatus" variable.
     */
    public EnumUsmUserStatus getUsmUserStatus() throws SnmpStatusException;

    /**
     * Setter for the "UsmUserStatus" variable.
     */
    public void setUsmUserStatus(EnumUsmUserStatus x) throws SnmpStatusException;

    /**
     * Checker for the "UsmUserStatus" variable.
     */
    public void checkUsmUserStatus(EnumUsmUserStatus x) throws SnmpStatusException;

    /**
     * Getter for the "UsmUserStorageType" variable.
     */
    public EnumUsmUserStorageType getUsmUserStorageType() throws SnmpStatusException;

    /**
     * Setter for the "UsmUserStorageType" variable.
     */
    public void setUsmUserStorageType(EnumUsmUserStorageType x) throws SnmpStatusException;

    /**
     * Checker for the "UsmUserStorageType" variable.
     */
    public void checkUsmUserStorageType(EnumUsmUserStorageType x) throws SnmpStatusException;

    /**
     * Getter for the "UsmUserSecurityName" variable.
     */
    public String getUsmUserSecurityName() throws SnmpStatusException;

    /**
     * Getter for the "UsmUserName" variable.
     */
    public String getUsmUserName() throws SnmpStatusException;

    /**
     * Getter for the "UsmUserPublic" variable.
     */
    public Byte[] getUsmUserPublic() throws SnmpStatusException;

    /**
     * Setter for the "UsmUserPublic" variable.
     */
    public void setUsmUserPublic(Byte[] x) throws SnmpStatusException;

    /**
     * Checker for the "UsmUserPublic" variable.
     */
    public void checkUsmUserPublic(Byte[] x) throws SnmpStatusException;

    /**
     * Getter for the "UsmUserEngineID" variable.
     */
    public Byte[] getUsmUserEngineID() throws SnmpStatusException;

    /**
     * Getter for the "UsmUserOwnPrivKeyChange" variable.
     */
    public Byte[] getUsmUserOwnPrivKeyChange() throws SnmpStatusException;

    /**
     * Setter for the "UsmUserOwnPrivKeyChange" variable.
     */
    public void setUsmUserOwnPrivKeyChange(Byte[] x) throws SnmpStatusException;

    /**
     * Checker for the "UsmUserOwnPrivKeyChange" variable.
     */
    public void checkUsmUserOwnPrivKeyChange(Byte[] x) throws SnmpStatusException;

}
